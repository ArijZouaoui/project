{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Arij\\\\projects\\\\theone\\\\src\\\\components\\\\calendar.jsx\";\nimport React, { Component } from 'react';\nimport './styling.css';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport bootstrapPlugin from '@fullcalendar/bootstrap';\nimport PopUp from './popup';\nimport { faCoffee, faSearch } from '@fortawesome/free-solid-svg-icons';\nimport Dialog from 'react-bootstrap-dialog';\nimport { Button, Modal } from 'react-bootstrap';\nimport MyModal from './modal';\nimport ModalBody from \"react-bootstrap/ModalBody\";\nimport ModalHeader from \"react-bootstrap/ModalHeader\";\nimport ModalFooter from \"react-bootstrap/ModalFooter\";\nimport ModalTitle from \"react-bootstrap/ModalTitle\";\nimport { getEvents } from \"../eventData\";\nimport { getCategories } from \"../categoriesData\";\nexport default class TheCalendar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDateClick = arg => {// bind with an arrow function\n    };\n\n    this.handleDragStop = eventClickInfo => {\n      this.dialog.show({\n        title: eventClickInfo.title,\n        body: '<h1>HELLO</h1>',\n        actions: [Dialog.CancelAction(), Dialog.OKAction()],\n        bsSize: 'small',\n        onHide: dialog => {\n          dialog.hide();\n          console.log('closed by clicking background.');\n        }\n      });\n    };\n\n    this.toggle = () => {\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.handleEventClick = ({\n      event,\n      el\n    }) => {\n      this.toggle();\n      this.setState({\n        event\n      });\n    };\n\n    this.replaceModalItem = this.replaceModalItem.bind(this);\n    this.saveModalDetails = this.saveModalDetails.bind(this);\n    this.handleEventClick = this.handleEventClick.bind(this);\n    this.state = {\n      modal: false,\n      requiredItem: 0,\n      events: [],\n      categories: [],\n      event: {\n        title: 'my event',\n        start: '2020-04-01',\n        end: '2020-04-02'\n      },\n      seen: false\n    };\n  }\n\n  replaceModalItem(info) {\n    this.setState({\n      requiredItem: this.state.events.indexOf(info.event)\n    });\n  }\n\n  saveModalDetails(item) {\n    const requiredItem = this.state.requiredItem;\n    let tempevents = this.state.events;\n    tempevents[requiredItem] = item;\n    this.setState({\n      events: tempevents\n    });\n  }\n\n  deleteItem(index) {\n    let tempevents = this.state.events;\n    tempevents.splice(index, 1);\n    this.setState({\n      events: tempevents\n    });\n  }\n\n  componentDidMount() {\n    this.setState({\n      events: getEvents(),\n      categories: getCategories()\n    });\n  }\n\n  formatEvents() {\n    return this.state.events.map(event => {\n      const {\n        title,\n        end,\n        start\n      } = event;\n      let startTime = new Date(start);\n      let endTime = new Date(end);\n      return {\n        title,\n        start: startTime,\n        end: endTime,\n        extendedProps: { ...event\n        }\n      };\n    });\n  }\n\n  // handleEventClick= ({event}) => {\n  // openevent is a function I wrote to open a form to edit that appointment\n  // this.props.openAppointment(event.extendedProps)\n  //this.dialog.showAlert('Hello Dialog!')}\n\n  /*  handleEventDrop = (info) => {\r\n            if(window.confirm(\"Are you sure you want to change the event date?\")){\r\n                console.log('change confirmed')\r\n    \r\n                // updateAppointment is another custom method\r\n                this.props.updateAppointment({...info.event.extendedProps, start: info.event.start, end: info.event.end})\r\n    \r\n            } else {\r\n                console.log('change aborted')\r\n            }\r\n       }*/\n  render() {\n    const requiredItem = this.state.requiredItem;\n    let modalData = this.state.events[requiredItem];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(FullCalendar, {\n      dateClick: this.handleDateClick,\n      plugins: [dayGridPlugin, interactionPlugin, bootstrapPlugin],\n      weekends: false,\n      editable: true,\n      selectable: true,\n      selectMirror: true // eventClick = {function(calEvent, jsEvent, view, resourceObj) {alert(calEvent.title)}}\n      ,\n      eventDragStop: this.handleDragStop,\n      eventClick: this.handleEventClick,\n      select: this.handleEventClick,\n      dateClick: this.handleEventClick,\n      events: this.formatEvents(),\n      slotWidth: 60,\n      eventColor: \"#378006\",\n      eventBackgroundColor: \"white\",\n      eventBorderColor: \"black\",\n      eventTextColor: \"red\",\n      customButtons: {\n        myCustomButton: {\n          text: 'Add new event ',\n          click: function () {\n            alert('clicked the custom button!');\n          }\n        }\n      },\n      header: {\n        right: 'prev,next today ',\n        center: 'title',\n        left: 'myCustomButton,timeGridWeek,timeGridDay,listWeek'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      className: this.props.className,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }\n    }, this.state.event.title), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 15\n      }\n    }, this.state.event.start))), /*#__PURE__*/React.createElement(ModalFooter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }\n    }, \"Do Something\"), \" \", /*#__PURE__*/React.createElement(Button, {\n      color: \"secondary\",\n      onClick: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }\n    }, \"Cancel\"))), /*#__PURE__*/React.createElement(Dialog, {\n      className: \"modal-dialog modal-dialog-centered\",\n      ref: component => {\n        this.dialog = component;\n      },\n      body: \"<h1>HELLO</h1>\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 15\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Arij/projects/theone/src/components/calendar.jsx"],"names":["React","Component","FullCalendar","dayGridPlugin","interactionPlugin","bootstrapPlugin","PopUp","faCoffee","faSearch","Dialog","Button","Modal","MyModal","ModalBody","ModalHeader","ModalFooter","ModalTitle","getEvents","getCategories","TheCalendar","constructor","props","handleDateClick","arg","handleDragStop","eventClickInfo","dialog","show","title","body","actions","CancelAction","OKAction","bsSize","onHide","hide","console","log","toggle","setState","modal","state","handleEventClick","event","el","replaceModalItem","bind","saveModalDetails","requiredItem","events","categories","start","end","seen","info","indexOf","item","tempevents","deleteItem","index","splice","componentDidMount","formatEvents","map","startTime","Date","endTime","extendedProps","render","modalData","myCustomButton","text","click","alert","right","center","left","className","component"],"mappings":"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","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport './styling.css';\r\nimport FullCalendar from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport bootstrapPlugin from '@fullcalendar/bootstrap';\r\nimport PopUp from './popup';\r\nimport { faCoffee, faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport Dialog from 'react-bootstrap-dialog'\r\nimport {Button,Modal} from 'react-bootstrap';\r\nimport MyModal from './modal';\r\nimport ModalBody from \"react-bootstrap/ModalBody\";\r\nimport ModalHeader from \"react-bootstrap/ModalHeader\";\r\nimport ModalFooter from \"react-bootstrap/ModalFooter\";\r\nimport ModalTitle from \"react-bootstrap/ModalTitle\";\r\nimport {getEvents} from \"../eventData\";\r\nimport {getCategories} from \"../categoriesData\";\r\nexport default class TheCalendar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.replaceModalItem = this.replaceModalItem.bind(this);\r\n    this.saveModalDetails = this.saveModalDetails.bind(this);\r\n    this.handleEventClick = this.handleEventClick.bind(this)\r\n    this.state = {\r\n      modal: false,\r\n      requiredItem: 0,\r\n      events:[],\r\n      categories:[],\r\n      event:{title: 'my event',start: '2020-04-01', end:'2020-04-02'},\r\n      seen: false\r\n    }\r\n  }\r\n  replaceModalItem(info) {\r\n    this.setState({\r\n      requiredItem: this.state.events.indexOf(info.event)\r\n    });\r\n  }\r\n\r\n  saveModalDetails(item) {\r\n    const requiredItem = this.state.requiredItem;\r\n    let tempevents = this.state.events;\r\n    tempevents[requiredItem] = item;\r\n    this.setState({ events: tempevents });\r\n  }\r\n\r\n  deleteItem(index) {\r\n    let tempevents = this.state.events;\r\n    tempevents.splice(index, 1);\r\n    this.setState({ events: tempevents });\r\n  }\r\n    \r\n  componentDidMount(){\r\n    this.setState({events: getEvents(), categories: getCategories()});\r\n  }\r\n\r\n    handleDateClick = (arg) => { // bind with an arrow function\r\n       \r\n      }\r\n      formatEvents() {\r\n        return this.state.events.map(event => {\r\n                  const {title, end, start} = event\r\n      \r\n                  let startTime = new Date(start)\r\n                  let endTime = new Date(end)\r\n      \r\n                  return {\r\n                    title, \r\n                    start: startTime,\r\n                    end: endTime, \r\n                    extendedProps: {...event}\r\n                  }\r\n              })\r\n      }\r\n      handleDragStop=(eventClickInfo)=>{\r\n        \r\n        this.dialog.show({\r\n            title: eventClickInfo.title,\r\n            body: '<h1>HELLO</h1>',\r\n            actions: [\r\n              Dialog.CancelAction(),\r\n              Dialog.OKAction()\r\n            ],\r\n            bsSize: 'small',\r\n            onHide: (dialog) => {\r\n              dialog.hide()\r\n              console.log('closed by clicking background.')\r\n            }\r\n          })\r\n\r\n      }\r\n      toggle = () => {\r\n        this.setState({ modal: !this.state.modal });\r\n      };\r\n    \r\n      handleEventClick = ({ event, el }) => {\r\n        this.toggle();\r\n        this.setState({ event });\r\n      };\r\n      // handleEventClick= ({event}) => {\r\n        // openevent is a function I wrote to open a form to edit that appointment\r\n       // this.props.openAppointment(event.extendedProps)\r\n //this.dialog.showAlert('Hello Dialog!')}\r\n \r\n  /*  handleEventDrop = (info) => {\r\n            if(window.confirm(\"Are you sure you want to change the event date?\")){\r\n                console.log('change confirmed')\r\n    \r\n                // updateAppointment is another custom method\r\n                this.props.updateAppointment({...info.event.extendedProps, start: info.event.start, end: info.event.end})\r\n    \r\n            } else {\r\n                console.log('change aborted')\r\n            }\r\n       }*/\r\n  render() {\r\n    const requiredItem = this.state.requiredItem;\r\n    let modalData = this.state.events[requiredItem];\r\n    return (\r\n    <div className='jumbotron'>\r\n              <FullCalendar dateClick={this.handleDateClick} \r\n              plugins={[ dayGridPlugin, interactionPlugin,bootstrapPlugin ]}\r\n               weekends={false}\r\n                editable={true}\r\n                selectable={true}\r\n                selectMirror={true}\r\n               // eventClick = {function(calEvent, jsEvent, view, resourceObj) {alert(calEvent.title)}}\r\n                eventDragStop={this.handleDragStop}\r\n                eventClick={this.handleEventClick}\r\n                select={this.handleEventClick}\r\n                dateClick={this.handleEventClick}\r\n                events={this.formatEvents()}\r\n                slotWidth={60}\r\n                eventColor= '#378006'\r\n                eventBackgroundColor='white'\r\n                eventBorderColor=\"black\"\r\n                eventTextColor='red'\r\n                customButtons={{\r\n                  myCustomButton: {\r\n                      text: 'Add new event ',\r\n                      click: function() {\r\n                          alert('clicked the custom button!');\r\n                      },\r\n                  },\r\n              }}\r\n              header={{\r\n                  right:  'prev,next today ',\r\n                  center: 'title',\r\n                  left:'myCustomButton,timeGridWeek,timeGridDay,listWeek'\r\n              }}\r\n             \r\n                \r\n              />\r\n               <Modal\r\n          isOpen={this.state.modal}\r\n          toggle={this.toggle}\r\n          className={this.props.className}\r\n        >\r\n          <ModalHeader toggle={this.toggle}>\r\n            {this.state.event.title}\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <div>\r\n              <p>{this.state.event.start}</p>\r\n            </div>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color=\"primary\">Do Something</Button>{\" \"}\r\n            <Button color=\"secondary\" onClick={this.toggle}>\r\n              Cancel\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n              <Dialog className=\"modal-dialog modal-dialog-centered\"\r\n              ref={(component) => { this.dialog = component }}\r\n              body={\"<h1>HELLO</h1>\"} />\r\n              \r\n              </div>\r\n\r\n\r\n)\r\n  }\r\n}\r\n\r\n    \r\n"]},"metadata":{},"sourceType":"module"}