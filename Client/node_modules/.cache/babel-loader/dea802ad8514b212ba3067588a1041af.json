{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Arij\\\\projects\\\\theone\\\\src\\\\components\\\\calendar.jsx\";\nimport React, { Component } from 'react';\nimport './styling.css';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport bootstrapPlugin from '@fullcalendar/bootstrap';\nimport PopUp from './popup';\nimport { faCoffee, faSearch } from '@fortawesome/free-solid-svg-icons';\nimport Dialog from 'react-bootstrap-dialog';\nimport { Button, Modal } from 'react-bootstrap';\nimport MyModal from './modal';\nexport default class TheCalendar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDateClick = arg => {// bind with an arrow function\n    };\n\n    this.handleDragStop = (event_title, event_date) => {\n      this.dialog.show({\n        title: event_title,\n        body: '<h1>HELLO</h1>',\n        actions: [Dialog.CancelAction(), Dialog.OKAction()],\n        bsSize: 'small',\n        onHide: dialog => {\n          dialog.hide();\n          console.log('closed by clicking background.');\n        }\n      });\n    };\n\n    this.handleEventClick = ({\n      event\n    }) => {\n      // openevent is a function I wrote to open a form to edit that appointment\n      // this.props.openAppointment(event.extendedProps)\n      this.dialog.showAlert('Hello Dialog!');\n    };\n\n    this.replaceModalItem = this.replaceModalItem.bind(this);\n    this.saveModalDetails = this.saveModalDetails.bind(this);\n    this.handleEventClick = this.handleEventClick.bind(this);\n    this.state = {\n      requiredItem: 0,\n      events: [{\n        title: 'event 1',\n        start: '2020-04-01',\n        end: '2020-04-02',\n        rendering: 'background'\n      }, {\n        title: 'event 2',\n        start: '2020-04-01',\n        end: '2020-04-05',\n        rendering: 'background'\n      }],\n      seen: false\n    };\n  }\n\n  replaceModalItem(info) {\n    this.setState({\n      requiredItem: this.state.events.indexOf(info.event)\n    });\n  }\n\n  saveModalDetails(item) {\n    const requiredItem = this.state.requiredItem;\n    let tempevents = this.state.events;\n    tempevents[requiredItem] = item;\n    this.setState({\n      events: tempevents\n    });\n  }\n\n  deleteItem(index) {\n    let tempevents = this.state.events;\n    tempevents.splice(index, 1);\n    this.setState({\n      events: tempevents\n    });\n  }\n\n  formatEvents() {\n    return this.state.events.map(event => {\n      const {\n        title,\n        end,\n        start\n      } = event;\n      let startTime = new Date(start);\n      let endTime = new Date(end);\n      return {\n        title,\n        start: startTime,\n        end: endTime,\n        extendedProps: { ...event\n        }\n      };\n    });\n  }\n\n  /*  handleEventDrop = (info) => {\r\n            if(window.confirm(\"Are you sure you want to change the event date?\")){\r\n                console.log('change confirmed')\r\n    \r\n                // updateAppointment is another custom method\r\n                this.props.updateAppointment({...info.event.extendedProps, start: info.event.start, end: info.event.end})\r\n    \r\n            } else {\r\n                console.log('change aborted')\r\n            }\r\n       }*/\n  render() {\n    const requiredItem = this.state.requiredItem;\n    let modalData = this.state.events[requiredItem];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(FullCalendar, {\n      dateClick: this.handleDateClick,\n      plugins: [dayGridPlugin, interactionPlugin, bootstrapPlugin],\n      weekends: false,\n      editable: true,\n      selectable: true,\n      selectMirror: true // eventClick = {function(calEvent, jsEvent, view, resourceObj) {alert(calEvent.title)}}\n      ,\n      eventDragStop: this.handleDragStop,\n      eventClick: function (info) {\n        let event_title = info.event.title;\n        let event_date = info.jsEvent.pageX + ',' + info.jsEvent.pageY;\n        let f = this.handleDragStop.bind(this);\n        f(event_title, event_date);\n      },\n      select: this.handleEventClick,\n      dateClick: this.handleEventClick,\n      events: this.formatEvents(),\n      slotWidth: 60,\n      eventColor: \"#378006\",\n      eventBackgroundColor: \"white\",\n      eventBorderColor: \"black\",\n      eventTextColor: \"red\",\n      customButtons: {\n        myCustomButton: {\n          text: 'Add new event ',\n          click: function () {\n            alert('clicked the custom button!');\n          }\n        }\n      },\n      header: {\n        right: 'prev,next today ',\n        center: 'title',\n        left: 'myCustomButton,timeGridWeek,timeGridDay,listWeek'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Dialog, {\n      className: \"modal-dialog modal-dialog-centered\",\n      ref: component => {\n        this.dialog = component;\n      },\n      body: \"<h1>HELLO</h1>\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 15\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Arij/projects/theone/src/components/calendar.jsx"],"names":["React","Component","FullCalendar","dayGridPlugin","interactionPlugin","bootstrapPlugin","PopUp","faCoffee","faSearch","Dialog","Button","Modal","MyModal","TheCalendar","constructor","props","handleDateClick","arg","handleDragStop","event_title","event_date","dialog","show","title","body","actions","CancelAction","OKAction","bsSize","onHide","hide","console","log","handleEventClick","event","showAlert","replaceModalItem","bind","saveModalDetails","state","requiredItem","events","start","end","rendering","seen","info","setState","indexOf","item","tempevents","deleteItem","index","splice","formatEvents","map","startTime","Date","endTime","extendedProps","render","modalData","jsEvent","pageX","pageY","f","myCustomButton","text","click","alert","right","center","left","component"],"mappings":"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","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport './styling.css';\r\nimport FullCalendar from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport bootstrapPlugin from '@fullcalendar/bootstrap';\r\nimport PopUp from './popup';\r\nimport { faCoffee, faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport Dialog from 'react-bootstrap-dialog'\r\nimport {Button,Modal} from 'react-bootstrap';\r\nimport MyModal from './modal';\r\n\r\nexport default class TheCalendar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.replaceModalItem = this.replaceModalItem.bind(this);\r\n    this.saveModalDetails = this.saveModalDetails.bind(this);\r\n    this.handleEventClick = this.handleEventClick.bind(this)\r\n    this.state = {\r\n      requiredItem: 0,\r\n      events:[\r\n        { title: 'event 1', start: '2020-04-01', end:'2020-04-02' ,rendering: 'background'},\r\n        { title: 'event 2',  start: '2020-04-01', end:'2020-04-05' ,rendering: 'background'}\r\n      ],\r\n      seen: false\r\n    }\r\n  }\r\n  replaceModalItem(info) {\r\n    this.setState({\r\n      requiredItem: this.state.events.indexOf(info.event)\r\n    });\r\n  }\r\n\r\n  saveModalDetails(item) {\r\n    const requiredItem = this.state.requiredItem;\r\n    let tempevents = this.state.events;\r\n    tempevents[requiredItem] = item;\r\n    this.setState({ events: tempevents });\r\n  }\r\n\r\n  deleteItem(index) {\r\n    let tempevents = this.state.events;\r\n    tempevents.splice(index, 1);\r\n    this.setState({ events: tempevents });\r\n  }\r\n    \r\n\r\n\r\n    handleDateClick = (arg) => { // bind with an arrow function\r\n       \r\n      }\r\n      formatEvents() {\r\n        return this.state.events.map(event => {\r\n                  const {title, end, start} = event\r\n      \r\n                  let startTime = new Date(start)\r\n                  let endTime = new Date(end)\r\n      \r\n                  return {\r\n                    title, \r\n                    start: startTime,\r\n                    end: endTime, \r\n                    extendedProps: {...event}\r\n                  }\r\n              })\r\n      }\r\n      handleDragStop=(event_title, event_date)=>{\r\n        this.dialog.show({\r\n            title: event_title,\r\n            body: '<h1>HELLO</h1>',\r\n            actions: [\r\n              Dialog.CancelAction(),\r\n              Dialog.OKAction()\r\n            ],\r\n            bsSize: 'small',\r\n            onHide: (dialog) => {\r\n              dialog.hide()\r\n              console.log('closed by clicking background.')\r\n            }\r\n          })\r\n\r\n      }\r\n      handleEventClick= ({event}) => {\r\n        // openevent is a function I wrote to open a form to edit that appointment\r\n       // this.props.openAppointment(event.extendedProps)\r\n this.dialog.showAlert('Hello Dialog!')}\r\n \r\n  /*  handleEventDrop = (info) => {\r\n            if(window.confirm(\"Are you sure you want to change the event date?\")){\r\n                console.log('change confirmed')\r\n    \r\n                // updateAppointment is another custom method\r\n                this.props.updateAppointment({...info.event.extendedProps, start: info.event.start, end: info.event.end})\r\n    \r\n            } else {\r\n                console.log('change aborted')\r\n            }\r\n       }*/\r\n  render() {\r\n    const requiredItem = this.state.requiredItem;\r\n    let modalData = this.state.events[requiredItem];\r\n    return (\r\n    <div className='jumbotron'>\r\n              <FullCalendar dateClick={this.handleDateClick} \r\n              plugins={[ dayGridPlugin, interactionPlugin,bootstrapPlugin ]}\r\n               weekends={false}\r\n                editable={true}\r\n                selectable={true}\r\n                selectMirror={true}\r\n               // eventClick = {function(calEvent, jsEvent, view, resourceObj) {alert(calEvent.title)}}\r\n                eventDragStop={this.handleDragStop}\r\n                eventClick={ function(info) {\r\n                  let event_title=info.event.title;\r\n                  let event_date= info.jsEvent.pageX + ',' + info.jsEvent.pageY;\r\n                  let f=this.handleDragStop.bind(this);\r\n                  f(event_title,event_date);\r\n                }\r\n                }\r\n                select={this.handleEventClick}\r\n                dateClick={this.handleEventClick}\r\n                events={this.formatEvents()}\r\n                slotWidth={60}\r\n                eventColor= '#378006'\r\n                eventBackgroundColor='white'\r\n                eventBorderColor=\"black\"\r\n                eventTextColor='red'\r\n                customButtons={{\r\n                  myCustomButton: {\r\n                      text: 'Add new event ',\r\n                      click: function() {\r\n                          alert('clicked the custom button!');\r\n                      },\r\n                  },\r\n              }}\r\n              header={{\r\n                  right:  'prev,next today ',\r\n                  center: 'title',\r\n                  left:'myCustomButton,timeGridWeek,timeGridDay,listWeek'\r\n              }}\r\n             \r\n                \r\n              />\r\n              <Dialog className=\"modal-dialog modal-dialog-centered\"\r\n              ref={(component) => { this.dialog = component }}\r\n              body={\"<h1>HELLO</h1>\"} />\r\n              \r\n              </div>\r\n\r\n\r\n)\r\n  }\r\n}\r\n\r\n    \r\n"]},"metadata":{},"sourceType":"module"}