{"ast":null,"code":"/*!\nFullCalendar Day Grid Plugin v4.4.0\nDocs & License: https://fullcalendar.io/\n(c) 2019 Adam Shaw\n*/\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@fullcalendar/core')) : typeof define === 'function' && define.amd ? define(['exports', '@fullcalendar/core'], factory) : (global = global || self, factory(global.FullCalendarDayGrid = {}, global.FullCalendar));\n})(this, function (exports, core) {\n  'use strict';\n  /*! *****************************************************************************\r\n  Copyright (c) Microsoft Corporation. All rights reserved.\r\n  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n  this file except in compliance with the License. You may obtain a copy of the\r\n  License at http://www.apache.org/licenses/LICENSE-2.0\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n  MERCHANTABLITY OR NON-INFRINGEMENT.\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n  and limitations under the License.\r\n  ***************************************************************************** */\n\n  /* global Reflect, Promise */\n\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  function __extends(d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  }\n\n  var __assign = function () {\n    __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n\n      return t;\n    };\n\n    return __assign.apply(this, arguments);\n  };\n\n  var DayGridDateProfileGenerator =\n  /** @class */\n  function (_super) {\n    __extends(DayGridDateProfileGenerator, _super);\n\n    function DayGridDateProfileGenerator() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    } // Computes the date range that will be rendered.\n\n\n    DayGridDateProfileGenerator.prototype.buildRenderRange = function (currentRange, currentRangeUnit, isRangeAllDay) {\n      var dateEnv = this.dateEnv;\n\n      var renderRange = _super.prototype.buildRenderRange.call(this, currentRange, currentRangeUnit, isRangeAllDay);\n\n      var start = renderRange.start;\n      var end = renderRange.end;\n      var endOfWeek; // year and month views should be aligned with weeks. this is already done for week\n\n      if (/^(year|month)$/.test(currentRangeUnit)) {\n        start = dateEnv.startOfWeek(start); // make end-of-week if not already\n\n        endOfWeek = dateEnv.startOfWeek(end);\n\n        if (endOfWeek.valueOf() !== end.valueOf()) {\n          end = core.addWeeks(endOfWeek, 1);\n        }\n      } // ensure 6 weeks\n\n\n      if (this.options.monthMode && this.options.fixedWeekCount) {\n        var rowCnt = Math.ceil( // could be partial weeks due to hiddenDays\n        core.diffWeeks(start, end));\n        end = core.addWeeks(end, 6 - rowCnt);\n      }\n\n      return {\n        start: start,\n        end: end\n      };\n    };\n\n    return DayGridDateProfileGenerator;\n  }(core.DateProfileGenerator);\n  /* A rectangular panel that is absolutely positioned over other content\n  ------------------------------------------------------------------------------------------------------------------------\n  Options:\n    - className (string)\n    - content (HTML string, element, or element array)\n    - parentEl\n    - top\n    - left\n    - right (the x coord of where the right edge should be. not a \"CSS\" right)\n    - autoHide (boolean)\n    - show (callback)\n    - hide (callback)\n  */\n\n\n  var Popover =\n  /** @class */\n  function () {\n    function Popover(options) {\n      var _this = this;\n\n      this.isHidden = true;\n      this.margin = 10; // the space required between the popover and the edges of the scroll container\n      // Triggered when the user clicks *anywhere* in the document, for the autoHide feature\n\n      this.documentMousedown = function (ev) {\n        // only hide the popover if the click happened outside the popover\n        if (_this.el && !_this.el.contains(ev.target)) {\n          _this.hide();\n        }\n      };\n\n      this.options = options;\n    } // Shows the popover on the specified position. Renders it if not already\n\n\n    Popover.prototype.show = function () {\n      if (this.isHidden) {\n        if (!this.el) {\n          this.render();\n        }\n\n        this.el.style.display = '';\n        this.position();\n        this.isHidden = false;\n        this.trigger('show');\n      }\n    }; // Hides the popover, through CSS, but does not remove it from the DOM\n\n\n    Popover.prototype.hide = function () {\n      if (!this.isHidden) {\n        this.el.style.display = 'none';\n        this.isHidden = true;\n        this.trigger('hide');\n      }\n    }; // Creates `this.el` and renders content inside of it\n\n\n    Popover.prototype.render = function () {\n      var _this = this;\n\n      var options = this.options;\n      var el = this.el = core.createElement('div', {\n        className: 'fc-popover ' + (options.className || ''),\n        style: {\n          top: '0',\n          left: '0'\n        }\n      });\n\n      if (typeof options.content === 'function') {\n        options.content(el);\n      }\n\n      options.parentEl.appendChild(el); // when a click happens on anything inside with a 'fc-close' className, hide the popover\n\n      core.listenBySelector(el, 'click', '.fc-close', function (ev) {\n        _this.hide();\n      });\n\n      if (options.autoHide) {\n        document.addEventListener('mousedown', this.documentMousedown);\n      }\n    }; // Hides and unregisters any handlers\n\n\n    Popover.prototype.destroy = function () {\n      this.hide();\n\n      if (this.el) {\n        core.removeElement(this.el);\n        this.el = null;\n      }\n\n      document.removeEventListener('mousedown', this.documentMousedown);\n    }; // Positions the popover optimally, using the top/left/right options\n\n\n    Popover.prototype.position = function () {\n      var options = this.options;\n      var el = this.el;\n      var elDims = el.getBoundingClientRect(); // only used for width,height\n\n      var origin = core.computeRect(el.offsetParent);\n      var clippingRect = core.computeClippingRect(options.parentEl);\n      var top; // the \"position\" (not \"offset\") values for the popover\n\n      var left; //\n      // compute top and left\n\n      top = options.top || 0;\n\n      if (options.left !== undefined) {\n        left = options.left;\n      } else if (options.right !== undefined) {\n        left = options.right - elDims.width; // derive the left value from the right value\n      } else {\n        left = 0;\n      } // constrain to the view port. if constrained by two edges, give precedence to top/left\n\n\n      top = Math.min(top, clippingRect.bottom - elDims.height - this.margin);\n      top = Math.max(top, clippingRect.top + this.margin);\n      left = Math.min(left, clippingRect.right - elDims.width - this.margin);\n      left = Math.max(left, clippingRect.left + this.margin);\n      core.applyStyle(el, {\n        top: top - origin.top,\n        left: left - origin.left\n      });\n    }; // Triggers a callback. Calls a function in the option hash of the same name.\n    // Arguments beyond the first `name` are forwarded on.\n    // TODO: better code reuse for this. Repeat code\n    // can kill this???\n\n\n    Popover.prototype.trigger = function (name) {\n      if (this.options[name]) {\n        this.options[name].apply(this, Array.prototype.slice.call(arguments, 1));\n      }\n    };\n\n    return Popover;\n  }();\n  /* Event-rendering methods for the DayGrid class\n  ----------------------------------------------------------------------------------------------------------------------*/\n  // \"Simple\" is bad a name. has nothing to do with SimpleDayGrid\n\n\n  var SimpleDayGridEventRenderer =\n  /** @class */\n  function (_super) {\n    __extends(SimpleDayGridEventRenderer, _super);\n\n    function SimpleDayGridEventRenderer() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    } // Builds the HTML to be used for the default element for an individual segment\n\n\n    SimpleDayGridEventRenderer.prototype.renderSegHtml = function (seg, mirrorInfo) {\n      var context = this.context;\n      var eventRange = seg.eventRange;\n      var eventDef = eventRange.def;\n      var eventUi = eventRange.ui;\n      var allDay = eventDef.allDay;\n      var isDraggable = core.computeEventDraggable(context, eventDef, eventUi);\n      var isResizableFromStart = allDay && seg.isStart && core.computeEventStartResizable(context, eventDef, eventUi);\n      var isResizableFromEnd = allDay && seg.isEnd && core.computeEventEndResizable(context, eventDef, eventUi);\n      var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd, mirrorInfo);\n      var skinCss = core.cssToStr(this.getSkinCss(eventUi));\n      var timeHtml = '';\n      var timeText;\n      var titleHtml;\n      classes.unshift('fc-day-grid-event', 'fc-h-event'); // Only display a timed events time if it is the starting segment\n\n      if (seg.isStart) {\n        timeText = this.getTimeText(eventRange);\n\n        if (timeText) {\n          timeHtml = '<span class=\"fc-time\">' + core.htmlEscape(timeText) + '</span>';\n        }\n      }\n\n      titleHtml = '<span class=\"fc-title\">' + (core.htmlEscape(eventDef.title || '') || '&nbsp;') + // we always want one line of height\n      '</span>';\n      return '<a class=\"' + classes.join(' ') + '\"' + (eventDef.url ? ' href=\"' + core.htmlEscape(eventDef.url) + '\"' : '') + (skinCss ? ' style=\"' + skinCss + '\"' : '') + '>' + '<div class=\"fc-content\">' + (context.options.dir === 'rtl' ? titleHtml + ' ' + timeHtml : // put a natural space in between\n      timeHtml + ' ' + titleHtml //\n      ) + '</div>' + (isResizableFromStart ? '<div class=\"fc-resizer fc-start-resizer\"></div>' : '') + (isResizableFromEnd ? '<div class=\"fc-resizer fc-end-resizer\"></div>' : '') + '</a>';\n    }; // Computes a default event time formatting string if `eventTimeFormat` is not explicitly defined\n\n\n    SimpleDayGridEventRenderer.prototype.computeEventTimeFormat = function () {\n      return {\n        hour: 'numeric',\n        minute: '2-digit',\n        omitZeroMinute: true,\n        meridiem: 'narrow'\n      };\n    };\n\n    SimpleDayGridEventRenderer.prototype.computeDisplayEventEnd = function () {\n      return false; // TODO: somehow consider the originating DayGrid's column count\n    };\n\n    return SimpleDayGridEventRenderer;\n  }(core.FgEventRenderer);\n  /* Event-rendering methods for the DayGrid class\n  ----------------------------------------------------------------------------------------------------------------------*/\n\n\n  var DayGridEventRenderer =\n  /** @class */\n  function (_super) {\n    __extends(DayGridEventRenderer, _super);\n\n    function DayGridEventRenderer(dayGrid) {\n      var _this = _super.call(this) || this;\n\n      _this.dayGrid = dayGrid;\n      return _this;\n    } // Renders the given foreground event segments onto the grid\n\n\n    DayGridEventRenderer.prototype.attachSegs = function (segs, mirrorInfo) {\n      var rowStructs = this.rowStructs = this.renderSegRows(segs); // append to each row's content skeleton\n\n      this.dayGrid.rowEls.forEach(function (rowNode, i) {\n        rowNode.querySelector('.fc-content-skeleton > table').appendChild(rowStructs[i].tbodyEl);\n      }); // removes the \"more..\" events popover\n\n      if (!mirrorInfo) {\n        this.dayGrid.removeSegPopover();\n      }\n    }; // Unrenders all currently rendered foreground event segments\n\n\n    DayGridEventRenderer.prototype.detachSegs = function () {\n      var rowStructs = this.rowStructs || [];\n      var rowStruct;\n\n      while (rowStruct = rowStructs.pop()) {\n        core.removeElement(rowStruct.tbodyEl);\n      }\n\n      this.rowStructs = null;\n    }; // Uses the given events array to generate <tbody> elements that should be appended to each row's content skeleton.\n    // Returns an array of rowStruct objects (see the bottom of `renderSegRow`).\n    // PRECONDITION: each segment shoud already have a rendered and assigned `.el`\n\n\n    DayGridEventRenderer.prototype.renderSegRows = function (segs) {\n      var rowStructs = [];\n      var segRows;\n      var row;\n      segRows = this.groupSegRows(segs); // group into nested arrays\n      // iterate each row of segment groupings\n\n      for (row = 0; row < segRows.length; row++) {\n        rowStructs.push(this.renderSegRow(row, segRows[row]));\n      }\n\n      return rowStructs;\n    }; // Given a row # and an array of segments all in the same row, render a <tbody> element, a skeleton that contains\n    // the segments. Returns object with a bunch of internal data about how the render was calculated.\n    // NOTE: modifies rowSegs\n\n\n    DayGridEventRenderer.prototype.renderSegRow = function (row, rowSegs) {\n      var isRtl = this.context.isRtl;\n      var dayGrid = this.dayGrid;\n      var colCnt = dayGrid.colCnt;\n      var segLevels = this.buildSegLevels(rowSegs); // group into sub-arrays of levels\n\n      var levelCnt = Math.max(1, segLevels.length); // ensure at least one level\n\n      var tbody = document.createElement('tbody');\n      var segMatrix = []; // lookup for which segments are rendered into which level+col cells\n\n      var cellMatrix = []; // lookup for all <td> elements of the level+col matrix\n\n      var loneCellMatrix = []; // lookup for <td> elements that only take up a single column\n\n      var i;\n      var levelSegs;\n      var col;\n      var tr;\n      var j;\n      var seg;\n      var td; // populates empty cells from the current column (`col`) to `endCol`\n\n      function emptyCellsUntil(endCol) {\n        while (col < endCol) {\n          // try to grab a cell from the level above and extend its rowspan. otherwise, create a fresh cell\n          td = (loneCellMatrix[i - 1] || [])[col];\n\n          if (td) {\n            td.rowSpan = (td.rowSpan || 1) + 1;\n          } else {\n            td = document.createElement('td');\n            tr.appendChild(td);\n          }\n\n          cellMatrix[i][col] = td;\n          loneCellMatrix[i][col] = td;\n          col++;\n        }\n      }\n\n      for (i = 0; i < levelCnt; i++) {\n        // iterate through all levels\n        levelSegs = segLevels[i];\n        col = 0;\n        tr = document.createElement('tr');\n        segMatrix.push([]);\n        cellMatrix.push([]);\n        loneCellMatrix.push([]); // levelCnt might be 1 even though there are no actual levels. protect against this.\n        // this single empty row is useful for styling.\n\n        if (levelSegs) {\n          for (j = 0; j < levelSegs.length; j++) {\n            // iterate through segments in level\n            seg = levelSegs[j];\n            var leftCol = isRtl ? colCnt - 1 - seg.lastCol : seg.firstCol;\n            var rightCol = isRtl ? colCnt - 1 - seg.firstCol : seg.lastCol;\n            emptyCellsUntil(leftCol); // create a container that occupies or more columns. append the event element.\n\n            td = core.createElement('td', {\n              className: 'fc-event-container'\n            }, seg.el);\n\n            if (leftCol !== rightCol) {\n              td.colSpan = rightCol - leftCol + 1;\n            } else {\n              // a single-column segment\n              loneCellMatrix[i][col] = td;\n            }\n\n            while (col <= rightCol) {\n              cellMatrix[i][col] = td;\n              segMatrix[i][col] = seg;\n              col++;\n            }\n\n            tr.appendChild(td);\n          }\n        }\n\n        emptyCellsUntil(colCnt); // finish off the row\n\n        var introHtml = dayGrid.renderProps.renderIntroHtml();\n\n        if (introHtml) {\n          if (isRtl) {\n            core.appendToElement(tr, introHtml);\n          } else {\n            core.prependToElement(tr, introHtml);\n          }\n        }\n\n        tbody.appendChild(tr);\n      }\n\n      return {\n        row: row,\n        tbodyEl: tbody,\n        cellMatrix: cellMatrix,\n        segMatrix: segMatrix,\n        segLevels: segLevels,\n        segs: rowSegs\n      };\n    }; // Stacks a flat array of segments, which are all assumed to be in the same row, into subarrays of vertical levels.\n    // NOTE: modifies segs\n\n\n    DayGridEventRenderer.prototype.buildSegLevels = function (segs) {\n      var isRtl = this.context.isRtl;\n      var colCnt = this.dayGrid.colCnt;\n      var levels = [];\n      var i;\n      var seg;\n      var j; // Give preference to elements with certain criteria, so they have\n      // a chance to be closer to the top.\n\n      segs = this.sortEventSegs(segs);\n\n      for (i = 0; i < segs.length; i++) {\n        seg = segs[i]; // loop through levels, starting with the topmost, until the segment doesn't collide with other segments\n\n        for (j = 0; j < levels.length; j++) {\n          if (!isDaySegCollision(seg, levels[j])) {\n            break;\n          }\n        } // `j` now holds the desired subrow index\n\n\n        seg.level = j;\n        seg.leftCol = isRtl ? colCnt - 1 - seg.lastCol : seg.firstCol; // for sorting only\n\n        seg.rightCol = isRtl ? colCnt - 1 - seg.firstCol : seg.lastCol // for sorting only\n        ;\n        (levels[j] || (levels[j] = [])).push(seg);\n      } // order segments left-to-right. very important if calendar is RTL\n\n\n      for (j = 0; j < levels.length; j++) {\n        levels[j].sort(compareDaySegCols);\n      }\n\n      return levels;\n    }; // Given a flat array of segments, return an array of sub-arrays, grouped by each segment's row\n\n\n    DayGridEventRenderer.prototype.groupSegRows = function (segs) {\n      var segRows = [];\n      var i;\n\n      for (i = 0; i < this.dayGrid.rowCnt; i++) {\n        segRows.push([]);\n      }\n\n      for (i = 0; i < segs.length; i++) {\n        segRows[segs[i].row].push(segs[i]);\n      }\n\n      return segRows;\n    }; // Computes a default `displayEventEnd` value if one is not expliclty defined\n\n\n    DayGridEventRenderer.prototype.computeDisplayEventEnd = function () {\n      return this.dayGrid.colCnt === 1; // we'll likely have space if there's only one day\n    };\n\n    return DayGridEventRenderer;\n  }(SimpleDayGridEventRenderer); // Computes whether two segments' columns collide. They are assumed to be in the same row.\n\n\n  function isDaySegCollision(seg, otherSegs) {\n    var i;\n    var otherSeg;\n\n    for (i = 0; i < otherSegs.length; i++) {\n      otherSeg = otherSegs[i];\n\n      if (otherSeg.firstCol <= seg.lastCol && otherSeg.lastCol >= seg.firstCol) {\n        return true;\n      }\n    }\n\n    return false;\n  } // A cmp function for determining the leftmost event\n\n\n  function compareDaySegCols(a, b) {\n    return a.leftCol - b.leftCol;\n  }\n\n  var DayGridMirrorRenderer =\n  /** @class */\n  function (_super) {\n    __extends(DayGridMirrorRenderer, _super);\n\n    function DayGridMirrorRenderer() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    DayGridMirrorRenderer.prototype.attachSegs = function (segs, mirrorInfo) {\n      var sourceSeg = mirrorInfo.sourceSeg;\n      var rowStructs = this.rowStructs = this.renderSegRows(segs); // inject each new event skeleton into each associated row\n\n      this.dayGrid.rowEls.forEach(function (rowNode, row) {\n        var skeletonEl = core.htmlToElement('<div class=\"fc-mirror-skeleton\"><table></table></div>'); // will be absolutely positioned\n\n        var skeletonTopEl;\n        var skeletonTop; // If there is an original segment, match the top position. Otherwise, put it at the row's top level\n\n        if (sourceSeg && sourceSeg.row === row) {\n          skeletonTopEl = sourceSeg.el;\n        } else {\n          skeletonTopEl = rowNode.querySelector('.fc-content-skeleton tbody');\n\n          if (!skeletonTopEl) {\n            // when no events\n            skeletonTopEl = rowNode.querySelector('.fc-content-skeleton table');\n          }\n        }\n\n        skeletonTop = skeletonTopEl.getBoundingClientRect().top - rowNode.getBoundingClientRect().top; // the offsetParent origin\n\n        skeletonEl.style.top = skeletonTop + 'px';\n        skeletonEl.querySelector('table').appendChild(rowStructs[row].tbodyEl);\n        rowNode.appendChild(skeletonEl);\n      });\n    };\n\n    return DayGridMirrorRenderer;\n  }(DayGridEventRenderer);\n\n  var EMPTY_CELL_HTML = '<td style=\"pointer-events:none\"></td>';\n\n  var DayGridFillRenderer =\n  /** @class */\n  function (_super) {\n    __extends(DayGridFillRenderer, _super);\n\n    function DayGridFillRenderer(dayGrid) {\n      var _this = _super.call(this) || this;\n\n      _this.fillSegTag = 'td'; // override the default tag name\n\n      _this.dayGrid = dayGrid;\n      return _this;\n    }\n\n    DayGridFillRenderer.prototype.renderSegs = function (type, context, segs) {\n      // don't render timed background events\n      if (type === 'bgEvent') {\n        segs = segs.filter(function (seg) {\n          return seg.eventRange.def.allDay;\n        });\n      }\n\n      _super.prototype.renderSegs.call(this, type, context, segs);\n    };\n\n    DayGridFillRenderer.prototype.attachSegs = function (type, segs) {\n      var els = [];\n      var i;\n      var seg;\n      var skeletonEl;\n\n      for (i = 0; i < segs.length; i++) {\n        seg = segs[i];\n        skeletonEl = this.renderFillRow(type, seg);\n        this.dayGrid.rowEls[seg.row].appendChild(skeletonEl);\n        els.push(skeletonEl);\n      }\n\n      return els;\n    }; // Generates the HTML needed for one row of a fill. Requires the seg's el to be rendered.\n\n\n    DayGridFillRenderer.prototype.renderFillRow = function (type, seg) {\n      var dayGrid = this.dayGrid;\n      var isRtl = this.context.isRtl;\n      var colCnt = dayGrid.colCnt;\n      var leftCol = isRtl ? colCnt - 1 - seg.lastCol : seg.firstCol;\n      var rightCol = isRtl ? colCnt - 1 - seg.firstCol : seg.lastCol;\n      var startCol = leftCol;\n      var endCol = rightCol + 1;\n      var className;\n      var skeletonEl;\n      var trEl;\n\n      if (type === 'businessHours') {\n        className = 'bgevent';\n      } else {\n        className = type.toLowerCase();\n      }\n\n      skeletonEl = core.htmlToElement('<div class=\"fc-' + className + '-skeleton\">' + '<table><tr></tr></table>' + '</div>');\n      trEl = skeletonEl.getElementsByTagName('tr')[0];\n\n      if (startCol > 0) {\n        core.appendToElement(trEl, // will create (startCol + 1) td's\n        new Array(startCol + 1).join(EMPTY_CELL_HTML));\n      }\n\n      seg.el.colSpan = endCol - startCol;\n      trEl.appendChild(seg.el);\n\n      if (endCol < colCnt) {\n        core.appendToElement(trEl, // will create (colCnt - endCol) td's\n        new Array(colCnt - endCol + 1).join(EMPTY_CELL_HTML));\n      }\n\n      var introHtml = dayGrid.renderProps.renderIntroHtml();\n\n      if (introHtml) {\n        if (isRtl) {\n          core.appendToElement(trEl, introHtml);\n        } else {\n          core.prependToElement(trEl, introHtml);\n        }\n      }\n\n      return skeletonEl;\n    };\n\n    return DayGridFillRenderer;\n  }(core.FillRenderer);\n\n  var DayTile =\n  /** @class */\n  function (_super) {\n    __extends(DayTile, _super);\n\n    function DayTile(el) {\n      var _this = _super.call(this, el) || this;\n\n      var eventRenderer = _this.eventRenderer = new DayTileEventRenderer(_this);\n      var renderFrame = _this.renderFrame = core.memoizeRendering(_this._renderFrame);\n      _this.renderFgEvents = core.memoizeRendering(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer), [renderFrame]);\n      _this.renderEventSelection = core.memoizeRendering(eventRenderer.selectByInstanceId.bind(eventRenderer), eventRenderer.unselectByInstanceId.bind(eventRenderer), [_this.renderFgEvents]);\n      _this.renderEventDrag = core.memoizeRendering(eventRenderer.hideByHash.bind(eventRenderer), eventRenderer.showByHash.bind(eventRenderer), [renderFrame]);\n      _this.renderEventResize = core.memoizeRendering(eventRenderer.hideByHash.bind(eventRenderer), eventRenderer.showByHash.bind(eventRenderer), [renderFrame]);\n      return _this;\n    }\n\n    DayTile.prototype.firstContext = function (context) {\n      context.calendar.registerInteractiveComponent(this, {\n        el: this.el,\n        useEventCenter: false\n      });\n    };\n\n    DayTile.prototype.render = function (props, context) {\n      this.renderFrame(props.date);\n      this.renderFgEvents(context, props.fgSegs);\n      this.renderEventSelection(props.eventSelection);\n      this.renderEventDrag(props.eventDragInstances);\n      this.renderEventResize(props.eventResizeInstances);\n    };\n\n    DayTile.prototype.destroy = function () {\n      _super.prototype.destroy.call(this);\n\n      this.renderFrame.unrender(); // should unrender everything else\n\n      this.context.calendar.unregisterInteractiveComponent(this);\n    };\n\n    DayTile.prototype._renderFrame = function (date) {\n      var _a = this.context,\n          theme = _a.theme,\n          dateEnv = _a.dateEnv,\n          options = _a.options;\n      var title = dateEnv.format(date, core.createFormatter(options.dayPopoverFormat) // TODO: cache\n      );\n      this.el.innerHTML = '<div class=\"fc-header ' + theme.getClass('popoverHeader') + '\">' + '<span class=\"fc-title\">' + core.htmlEscape(title) + '</span>' + '<span class=\"fc-close ' + theme.getIconClass('close') + '\"></span>' + '</div>' + '<div class=\"fc-body ' + theme.getClass('popoverContent') + '\">' + '<div class=\"fc-event-container\"></div>' + '</div>';\n      this.segContainerEl = this.el.querySelector('.fc-event-container');\n    };\n\n    DayTile.prototype.queryHit = function (positionLeft, positionTop, elWidth, elHeight) {\n      var date = this.props.date; // HACK\n\n      if (positionLeft < elWidth && positionTop < elHeight) {\n        return {\n          component: this,\n          dateSpan: {\n            allDay: true,\n            range: {\n              start: date,\n              end: core.addDays(date, 1)\n            }\n          },\n          dayEl: this.el,\n          rect: {\n            left: 0,\n            top: 0,\n            right: elWidth,\n            bottom: elHeight\n          },\n          layer: 1\n        };\n      }\n    };\n\n    return DayTile;\n  }(core.DateComponent);\n\n  var DayTileEventRenderer =\n  /** @class */\n  function (_super) {\n    __extends(DayTileEventRenderer, _super);\n\n    function DayTileEventRenderer(dayTile) {\n      var _this = _super.call(this) || this;\n\n      _this.dayTile = dayTile;\n      return _this;\n    }\n\n    DayTileEventRenderer.prototype.attachSegs = function (segs) {\n      for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n        var seg = segs_1[_i];\n        this.dayTile.segContainerEl.appendChild(seg.el);\n      }\n    };\n\n    DayTileEventRenderer.prototype.detachSegs = function (segs) {\n      for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {\n        var seg = segs_2[_i];\n        core.removeElement(seg.el);\n      }\n    };\n\n    return DayTileEventRenderer;\n  }(SimpleDayGridEventRenderer);\n\n  var DayBgRow =\n  /** @class */\n  function () {\n    function DayBgRow(context) {\n      this.context = context;\n    }\n\n    DayBgRow.prototype.renderHtml = function (props) {\n      var parts = [];\n\n      if (props.renderIntroHtml) {\n        parts.push(props.renderIntroHtml());\n      }\n\n      for (var _i = 0, _a = props.cells; _i < _a.length; _i++) {\n        var cell = _a[_i];\n        parts.push(renderCellHtml(cell.date, props.dateProfile, this.context, cell.htmlAttrs));\n      }\n\n      if (!props.cells.length) {\n        parts.push('<td class=\"fc-day ' + this.context.theme.getClass('widgetContent') + '\"></td>');\n      }\n\n      if (this.context.options.dir === 'rtl') {\n        parts.reverse();\n      }\n\n      return '<tr>' + parts.join('') + '</tr>';\n    };\n\n    return DayBgRow;\n  }();\n\n  function renderCellHtml(date, dateProfile, context, otherAttrs) {\n    var dateEnv = context.dateEnv,\n        theme = context.theme;\n    var isDateValid = core.rangeContainsMarker(dateProfile.activeRange, date); // TODO: called too frequently. cache somehow.\n\n    var classes = core.getDayClasses(date, dateProfile, context);\n    classes.unshift('fc-day', theme.getClass('widgetContent'));\n    return '<td class=\"' + classes.join(' ') + '\"' + (isDateValid ? ' data-date=\"' + dateEnv.formatIso(date, {\n      omitTime: true\n    }) + '\"' : '') + (otherAttrs ? ' ' + otherAttrs : '') + '></td>';\n  }\n\n  var DAY_NUM_FORMAT = core.createFormatter({\n    day: 'numeric'\n  });\n  var WEEK_NUM_FORMAT = core.createFormatter({\n    week: 'numeric'\n  });\n\n  var DayGrid =\n  /** @class */\n  function (_super) {\n    __extends(DayGrid, _super);\n\n    function DayGrid(el, renderProps) {\n      var _this = _super.call(this, el) || this;\n\n      _this.bottomCoordPadding = 0; // hack for extending the hit area for the last row of the coordinate grid\n\n      _this.isCellSizesDirty = false;\n      _this.renderProps = renderProps;\n      var eventRenderer = _this.eventRenderer = new DayGridEventRenderer(_this);\n      var fillRenderer = _this.fillRenderer = new DayGridFillRenderer(_this);\n      _this.mirrorRenderer = new DayGridMirrorRenderer(_this);\n      var renderCells = _this.renderCells = core.memoizeRendering(_this._renderCells, _this._unrenderCells);\n      _this.renderBusinessHours = core.memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'businessHours'), fillRenderer.unrender.bind(fillRenderer, 'businessHours'), [renderCells]);\n      _this.renderDateSelection = core.memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'highlight'), fillRenderer.unrender.bind(fillRenderer, 'highlight'), [renderCells]);\n      _this.renderBgEvents = core.memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'bgEvent'), fillRenderer.unrender.bind(fillRenderer, 'bgEvent'), [renderCells]);\n      _this.renderFgEvents = core.memoizeRendering(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer), [renderCells]);\n      _this.renderEventSelection = core.memoizeRendering(eventRenderer.selectByInstanceId.bind(eventRenderer), eventRenderer.unselectByInstanceId.bind(eventRenderer), [_this.renderFgEvents]);\n      _this.renderEventDrag = core.memoizeRendering(_this._renderEventDrag, _this._unrenderEventDrag, [renderCells]);\n      _this.renderEventResize = core.memoizeRendering(_this._renderEventResize, _this._unrenderEventResize, [renderCells]);\n      return _this;\n    }\n\n    DayGrid.prototype.render = function (props, context) {\n      var cells = props.cells;\n      this.rowCnt = cells.length;\n      this.colCnt = cells[0].length;\n      this.renderCells(cells, props.isRigid);\n      this.renderBusinessHours(context, props.businessHourSegs);\n      this.renderDateSelection(context, props.dateSelectionSegs);\n      this.renderBgEvents(context, props.bgEventSegs);\n      this.renderFgEvents(context, props.fgEventSegs);\n      this.renderEventSelection(props.eventSelection);\n      this.renderEventDrag(props.eventDrag);\n      this.renderEventResize(props.eventResize);\n\n      if (this.segPopoverTile) {\n        this.updateSegPopoverTile();\n      }\n    };\n\n    DayGrid.prototype.destroy = function () {\n      _super.prototype.destroy.call(this);\n\n      this.renderCells.unrender(); // will unrender everything else\n    };\n\n    DayGrid.prototype.getCellRange = function (row, col) {\n      var start = this.props.cells[row][col].date;\n      var end = core.addDays(start, 1);\n      return {\n        start: start,\n        end: end\n      };\n    };\n\n    DayGrid.prototype.updateSegPopoverTile = function (date, segs) {\n      var ownProps = this.props;\n      this.segPopoverTile.receiveProps({\n        date: date || this.segPopoverTile.props.date,\n        fgSegs: segs || this.segPopoverTile.props.fgSegs,\n        eventSelection: ownProps.eventSelection,\n        eventDragInstances: ownProps.eventDrag ? ownProps.eventDrag.affectedInstances : null,\n        eventResizeInstances: ownProps.eventResize ? ownProps.eventResize.affectedInstances : null\n      }, this.context);\n    };\n    /* Date Rendering\n    ------------------------------------------------------------------------------------------------------------------*/\n\n\n    DayGrid.prototype._renderCells = function (cells, isRigid) {\n      var _a = this.context,\n          calendar = _a.calendar,\n          view = _a.view,\n          isRtl = _a.isRtl,\n          dateEnv = _a.dateEnv;\n\n      var _b = this,\n          rowCnt = _b.rowCnt,\n          colCnt = _b.colCnt;\n\n      var html = '';\n      var row;\n      var col;\n\n      for (row = 0; row < rowCnt; row++) {\n        html += this.renderDayRowHtml(row, isRigid);\n      }\n\n      this.el.innerHTML = html;\n      this.rowEls = core.findElements(this.el, '.fc-row');\n      this.cellEls = core.findElements(this.el, '.fc-day, .fc-disabled-day');\n\n      if (isRtl) {\n        this.cellEls.reverse();\n      }\n\n      this.rowPositions = new core.PositionCache(this.el, this.rowEls, false, true // vertical\n      );\n      this.colPositions = new core.PositionCache(this.el, this.cellEls.slice(0, colCnt), // only the first row\n      true, false // horizontal\n      ); // trigger dayRender with each cell's element\n\n      for (row = 0; row < rowCnt; row++) {\n        for (col = 0; col < colCnt; col++) {\n          calendar.publiclyTrigger('dayRender', [{\n            date: dateEnv.toDate(cells[row][col].date),\n            el: this.getCellEl(row, col),\n            view: view\n          }]);\n        }\n      }\n\n      this.isCellSizesDirty = true;\n    };\n\n    DayGrid.prototype._unrenderCells = function () {\n      this.removeSegPopover();\n    }; // Generates the HTML for a single row, which is a div that wraps a table.\n    // `row` is the row number.\n\n\n    DayGrid.prototype.renderDayRowHtml = function (row, isRigid) {\n      var theme = this.context.theme;\n      var classes = ['fc-row', 'fc-week', theme.getClass('dayRow')];\n\n      if (isRigid) {\n        classes.push('fc-rigid');\n      }\n\n      var bgRow = new DayBgRow(this.context);\n      return '' + '<div class=\"' + classes.join(' ') + '\">' + '<div class=\"fc-bg\">' + '<table class=\"' + theme.getClass('tableGrid') + '\">' + bgRow.renderHtml({\n        cells: this.props.cells[row],\n        dateProfile: this.props.dateProfile,\n        renderIntroHtml: this.renderProps.renderBgIntroHtml\n      }) + '</table>' + '</div>' + '<div class=\"fc-content-skeleton\">' + '<table>' + (this.getIsNumbersVisible() ? '<thead>' + this.renderNumberTrHtml(row) + '</thead>' : '') + '</table>' + '</div>' + '</div>';\n    };\n\n    DayGrid.prototype.getIsNumbersVisible = function () {\n      return this.getIsDayNumbersVisible() || this.renderProps.cellWeekNumbersVisible || this.renderProps.colWeekNumbersVisible;\n    };\n\n    DayGrid.prototype.getIsDayNumbersVisible = function () {\n      return this.rowCnt > 1;\n    };\n    /* Grid Number Rendering\n    ------------------------------------------------------------------------------------------------------------------*/\n\n\n    DayGrid.prototype.renderNumberTrHtml = function (row) {\n      var isRtl = this.context.isRtl;\n      var intro = this.renderProps.renderNumberIntroHtml(row, this);\n      return '' + '<tr>' + (isRtl ? '' : intro) + this.renderNumberCellsHtml(row) + (isRtl ? intro : '') + '</tr>';\n    };\n\n    DayGrid.prototype.renderNumberCellsHtml = function (row) {\n      var htmls = [];\n      var col;\n      var date;\n\n      for (col = 0; col < this.colCnt; col++) {\n        date = this.props.cells[row][col].date;\n        htmls.push(this.renderNumberCellHtml(date));\n      }\n\n      if (this.context.isRtl) {\n        htmls.reverse();\n      }\n\n      return htmls.join('');\n    }; // Generates the HTML for the <td>s of the \"number\" row in the DayGrid's content skeleton.\n    // The number row will only exist if either day numbers or week numbers are turned on.\n\n\n    DayGrid.prototype.renderNumberCellHtml = function (date) {\n      var _a = this.context,\n          dateEnv = _a.dateEnv,\n          options = _a.options;\n      var html = '';\n      var isDateValid = core.rangeContainsMarker(this.props.dateProfile.activeRange, date); // TODO: called too frequently. cache somehow.\n\n      var isDayNumberVisible = this.getIsDayNumbersVisible() && isDateValid;\n      var classes;\n      var weekCalcFirstDow;\n\n      if (!isDayNumberVisible && !this.renderProps.cellWeekNumbersVisible) {\n        // no numbers in day cell (week number must be along the side)\n        return '<td></td>'; //  will create an empty space above events :(\n      }\n\n      classes = core.getDayClasses(date, this.props.dateProfile, this.context);\n      classes.unshift('fc-day-top');\n\n      if (this.renderProps.cellWeekNumbersVisible) {\n        weekCalcFirstDow = dateEnv.weekDow;\n      }\n\n      html += '<td class=\"' + classes.join(' ') + '\"' + (isDateValid ? ' data-date=\"' + dateEnv.formatIso(date, {\n        omitTime: true\n      }) + '\"' : '') + '>';\n\n      if (this.renderProps.cellWeekNumbersVisible && date.getUTCDay() === weekCalcFirstDow) {\n        html += core.buildGotoAnchorHtml(options, dateEnv, {\n          date: date,\n          type: 'week'\n        }, {\n          'class': 'fc-week-number'\n        }, dateEnv.format(date, WEEK_NUM_FORMAT) // inner HTML\n        );\n      }\n\n      if (isDayNumberVisible) {\n        html += core.buildGotoAnchorHtml(options, dateEnv, date, {\n          'class': 'fc-day-number'\n        }, dateEnv.format(date, DAY_NUM_FORMAT) // inner HTML\n        );\n      }\n\n      html += '</td>';\n      return html;\n    };\n    /* Sizing\n    ------------------------------------------------------------------------------------------------------------------*/\n\n\n    DayGrid.prototype.updateSize = function (isResize) {\n      var calendar = this.context.calendar;\n\n      var _a = this,\n          fillRenderer = _a.fillRenderer,\n          eventRenderer = _a.eventRenderer,\n          mirrorRenderer = _a.mirrorRenderer;\n\n      if (isResize || this.isCellSizesDirty || calendar.isEventsUpdated // hack\n      ) {\n          this.buildPositionCaches();\n          this.isCellSizesDirty = false;\n        }\n\n      fillRenderer.computeSizes(isResize);\n      eventRenderer.computeSizes(isResize);\n      mirrorRenderer.computeSizes(isResize);\n      fillRenderer.assignSizes(isResize);\n      eventRenderer.assignSizes(isResize);\n      mirrorRenderer.assignSizes(isResize);\n    };\n\n    DayGrid.prototype.buildPositionCaches = function () {\n      this.buildColPositions();\n      this.buildRowPositions();\n    };\n\n    DayGrid.prototype.buildColPositions = function () {\n      this.colPositions.build();\n    };\n\n    DayGrid.prototype.buildRowPositions = function () {\n      this.rowPositions.build();\n      this.rowPositions.bottoms[this.rowCnt - 1] += this.bottomCoordPadding; // hack\n    };\n    /* Hit System\n    ------------------------------------------------------------------------------------------------------------------*/\n\n\n    DayGrid.prototype.positionToHit = function (leftPosition, topPosition) {\n      var _a = this,\n          colPositions = _a.colPositions,\n          rowPositions = _a.rowPositions;\n\n      var col = colPositions.leftToIndex(leftPosition);\n      var row = rowPositions.topToIndex(topPosition);\n\n      if (row != null && col != null) {\n        return {\n          row: row,\n          col: col,\n          dateSpan: {\n            range: this.getCellRange(row, col),\n            allDay: true\n          },\n          dayEl: this.getCellEl(row, col),\n          relativeRect: {\n            left: colPositions.lefts[col],\n            right: colPositions.rights[col],\n            top: rowPositions.tops[row],\n            bottom: rowPositions.bottoms[row]\n          }\n        };\n      }\n    };\n    /* Cell System\n    ------------------------------------------------------------------------------------------------------------------*/\n    // FYI: the first column is the leftmost column, regardless of date\n\n\n    DayGrid.prototype.getCellEl = function (row, col) {\n      return this.cellEls[row * this.colCnt + col];\n    };\n    /* Event Drag Visualization\n    ------------------------------------------------------------------------------------------------------------------*/\n\n\n    DayGrid.prototype._renderEventDrag = function (state) {\n      if (state) {\n        this.eventRenderer.hideByHash(state.affectedInstances);\n        this.fillRenderer.renderSegs('highlight', this.context, state.segs);\n      }\n    };\n\n    DayGrid.prototype._unrenderEventDrag = function (state) {\n      if (state) {\n        this.eventRenderer.showByHash(state.affectedInstances);\n        this.fillRenderer.unrender('highlight', this.context);\n      }\n    };\n    /* Event Resize Visualization\n    ------------------------------------------------------------------------------------------------------------------*/\n\n\n    DayGrid.prototype._renderEventResize = function (state) {\n      if (state) {\n        this.eventRenderer.hideByHash(state.affectedInstances);\n        this.fillRenderer.renderSegs('highlight', this.context, state.segs);\n        this.mirrorRenderer.renderSegs(this.context, state.segs, {\n          isResizing: true,\n          sourceSeg: state.sourceSeg\n        });\n      }\n    };\n\n    DayGrid.prototype._unrenderEventResize = function (state) {\n      if (state) {\n        this.eventRenderer.showByHash(state.affectedInstances);\n        this.fillRenderer.unrender('highlight', this.context);\n        this.mirrorRenderer.unrender(this.context, state.segs, {\n          isResizing: true,\n          sourceSeg: state.sourceSeg\n        });\n      }\n    };\n    /* More+ Link Popover\n    ------------------------------------------------------------------------------------------------------------------*/\n\n\n    DayGrid.prototype.removeSegPopover = function () {\n      if (this.segPopover) {\n        this.segPopover.hide(); // in handler, will call segPopover's removeElement\n      }\n    }; // Limits the number of \"levels\" (vertically stacking layers of events) for each row of the grid.\n    // `levelLimit` can be false (don't limit), a number, or true (should be computed).\n\n\n    DayGrid.prototype.limitRows = function (levelLimit) {\n      var rowStructs = this.eventRenderer.rowStructs || [];\n      var row; // row #\n\n      var rowLevelLimit;\n\n      for (row = 0; row < rowStructs.length; row++) {\n        this.unlimitRow(row);\n\n        if (!levelLimit) {\n          rowLevelLimit = false;\n        } else if (typeof levelLimit === 'number') {\n          rowLevelLimit = levelLimit;\n        } else {\n          rowLevelLimit = this.computeRowLevelLimit(row);\n        }\n\n        if (rowLevelLimit !== false) {\n          this.limitRow(row, rowLevelLimit);\n        }\n      }\n    }; // Computes the number of levels a row will accomodate without going outside its bounds.\n    // Assumes the row is \"rigid\" (maintains a constant height regardless of what is inside).\n    // `row` is the row number.\n\n\n    DayGrid.prototype.computeRowLevelLimit = function (row) {\n      var rowEl = this.rowEls[row]; // the containing \"fake\" row div\n\n      var rowBottom = rowEl.getBoundingClientRect().bottom; // relative to viewport!\n\n      var trEls = core.findChildren(this.eventRenderer.rowStructs[row].tbodyEl);\n      var i;\n      var trEl; // Reveal one level <tr> at a time and stop when we find one out of bounds\n\n      for (i = 0; i < trEls.length; i++) {\n        trEl = trEls[i];\n        trEl.classList.remove('fc-limited'); // reset to original state (reveal)\n\n        if (trEl.getBoundingClientRect().bottom > rowBottom) {\n          return i;\n        }\n      }\n\n      return false; // should not limit at all\n    }; // Limits the given grid row to the maximum number of levels and injects \"more\" links if necessary.\n    // `row` is the row number.\n    // `levelLimit` is a number for the maximum (inclusive) number of levels allowed.\n\n\n    DayGrid.prototype.limitRow = function (row, levelLimit) {\n      var _this = this;\n\n      var colCnt = this.colCnt;\n      var isRtl = this.context.isRtl;\n      var rowStruct = this.eventRenderer.rowStructs[row];\n      var moreNodes = []; // array of \"more\" <a> links and <td> DOM nodes\n\n      var col = 0; // col #, left-to-right (not chronologically)\n\n      var levelSegs; // array of segment objects in the last allowable level, ordered left-to-right\n\n      var cellMatrix; // a matrix (by level, then column) of all <td> elements in the row\n\n      var limitedNodes; // array of temporarily hidden level <tr> and segment <td> DOM nodes\n\n      var i;\n      var seg;\n      var segsBelow; // array of segment objects below `seg` in the current `col`\n\n      var totalSegsBelow; // total number of segments below `seg` in any of the columns `seg` occupies\n\n      var colSegsBelow; // array of segment arrays, below seg, one for each column (offset from segs's first column)\n\n      var td;\n      var rowSpan;\n      var segMoreNodes; // array of \"more\" <td> cells that will stand-in for the current seg's cell\n\n      var j;\n      var moreTd;\n      var moreWrap;\n      var moreLink; // Iterates through empty level cells and places \"more\" links inside if need be\n\n      var emptyCellsUntil = function (endCol) {\n        while (col < endCol) {\n          segsBelow = _this.getCellSegs(row, col, levelLimit);\n\n          if (segsBelow.length) {\n            td = cellMatrix[levelLimit - 1][col];\n            moreLink = _this.renderMoreLink(row, col, segsBelow);\n            moreWrap = core.createElement('div', null, moreLink);\n            td.appendChild(moreWrap);\n            moreNodes.push(moreWrap);\n          }\n\n          col++;\n        }\n      };\n\n      if (levelLimit && levelLimit < rowStruct.segLevels.length) {\n        // is it actually over the limit?\n        levelSegs = rowStruct.segLevels[levelLimit - 1];\n        cellMatrix = rowStruct.cellMatrix;\n        limitedNodes = core.findChildren(rowStruct.tbodyEl).slice(levelLimit); // get level <tr> elements past the limit\n\n        limitedNodes.forEach(function (node) {\n          node.classList.add('fc-limited'); // hide elements and get a simple DOM-nodes array\n        }); // iterate though segments in the last allowable level\n\n        for (i = 0; i < levelSegs.length; i++) {\n          seg = levelSegs[i];\n          var leftCol = isRtl ? colCnt - 1 - seg.lastCol : seg.firstCol;\n          var rightCol = isRtl ? colCnt - 1 - seg.firstCol : seg.lastCol;\n          emptyCellsUntil(leftCol); // process empty cells before the segment\n          // determine *all* segments below `seg` that occupy the same columns\n\n          colSegsBelow = [];\n          totalSegsBelow = 0;\n\n          while (col <= rightCol) {\n            segsBelow = this.getCellSegs(row, col, levelLimit);\n            colSegsBelow.push(segsBelow);\n            totalSegsBelow += segsBelow.length;\n            col++;\n          }\n\n          if (totalSegsBelow) {\n            // do we need to replace this segment with one or many \"more\" links?\n            td = cellMatrix[levelLimit - 1][leftCol]; // the segment's parent cell\n\n            rowSpan = td.rowSpan || 1;\n            segMoreNodes = []; // make a replacement <td> for each column the segment occupies. will be one for each colspan\n\n            for (j = 0; j < colSegsBelow.length; j++) {\n              moreTd = core.createElement('td', {\n                className: 'fc-more-cell',\n                rowSpan: rowSpan\n              });\n              segsBelow = colSegsBelow[j];\n              moreLink = this.renderMoreLink(row, leftCol + j, [seg].concat(segsBelow) // count seg as hidden too\n              );\n              moreWrap = core.createElement('div', null, moreLink);\n              moreTd.appendChild(moreWrap);\n              segMoreNodes.push(moreTd);\n              moreNodes.push(moreTd);\n            }\n\n            td.classList.add('fc-limited');\n            core.insertAfterElement(td, segMoreNodes);\n            limitedNodes.push(td);\n          }\n        }\n\n        emptyCellsUntil(this.colCnt); // finish off the level\n\n        rowStruct.moreEls = moreNodes; // for easy undoing later\n\n        rowStruct.limitedEls = limitedNodes; // for easy undoing later\n      }\n    }; // Reveals all levels and removes all \"more\"-related elements for a grid's row.\n    // `row` is a row number.\n\n\n    DayGrid.prototype.unlimitRow = function (row) {\n      var rowStruct = this.eventRenderer.rowStructs[row];\n\n      if (rowStruct.moreEls) {\n        rowStruct.moreEls.forEach(core.removeElement);\n        rowStruct.moreEls = null;\n      }\n\n      if (rowStruct.limitedEls) {\n        rowStruct.limitedEls.forEach(function (limitedEl) {\n          limitedEl.classList.remove('fc-limited');\n        });\n        rowStruct.limitedEls = null;\n      }\n    }; // Renders an <a> element that represents hidden event element for a cell.\n    // Responsible for attaching click handler as well.\n\n\n    DayGrid.prototype.renderMoreLink = function (row, col, hiddenSegs) {\n      var _this = this;\n\n      var _a = this.context,\n          calendar = _a.calendar,\n          view = _a.view,\n          dateEnv = _a.dateEnv,\n          options = _a.options,\n          isRtl = _a.isRtl;\n      var a = core.createElement('a', {\n        className: 'fc-more'\n      });\n      a.innerText = this.getMoreLinkText(hiddenSegs.length);\n      a.addEventListener('click', function (ev) {\n        var clickOption = options.eventLimitClick;\n\n        var _col = isRtl ? _this.colCnt - col - 1 : col; // HACK: props.cells has different dir system?\n\n\n        var date = _this.props.cells[row][_col].date;\n        var moreEl = ev.currentTarget;\n\n        var dayEl = _this.getCellEl(row, col);\n\n        var allSegs = _this.getCellSegs(row, col); // rescope the segments to be within the cell's date\n\n\n        var reslicedAllSegs = _this.resliceDaySegs(allSegs, date);\n\n        var reslicedHiddenSegs = _this.resliceDaySegs(hiddenSegs, date);\n\n        if (typeof clickOption === 'function') {\n          // the returned value can be an atomic option\n          clickOption = calendar.publiclyTrigger('eventLimitClick', [{\n            date: dateEnv.toDate(date),\n            allDay: true,\n            dayEl: dayEl,\n            moreEl: moreEl,\n            segs: reslicedAllSegs,\n            hiddenSegs: reslicedHiddenSegs,\n            jsEvent: ev,\n            view: view\n          }]);\n        }\n\n        if (clickOption === 'popover') {\n          _this.showSegPopover(row, col, moreEl, reslicedAllSegs);\n        } else if (typeof clickOption === 'string') {\n          // a view name\n          calendar.zoomTo(date, clickOption);\n        }\n      });\n      return a;\n    }; // Reveals the popover that displays all events within a cell\n\n\n    DayGrid.prototype.showSegPopover = function (row, col, moreLink, segs) {\n      var _this = this;\n\n      var _a = this.context,\n          calendar = _a.calendar,\n          view = _a.view,\n          theme = _a.theme,\n          isRtl = _a.isRtl;\n\n      var _col = isRtl ? this.colCnt - col - 1 : col; // HACK: props.cells has different dir system?\n\n\n      var moreWrap = moreLink.parentNode; // the <div> wrapper around the <a>\n\n      var topEl; // the element we want to match the top coordinate of\n\n      var options;\n\n      if (this.rowCnt === 1) {\n        topEl = view.el; // will cause the popover to cover any sort of header\n      } else {\n        topEl = this.rowEls[row]; // will align with top of row\n      }\n\n      options = {\n        className: 'fc-more-popover ' + theme.getClass('popover'),\n        parentEl: view.el,\n        top: core.computeRect(topEl).top,\n        autoHide: true,\n        content: function (el) {\n          _this.segPopoverTile = new DayTile(el);\n\n          _this.updateSegPopoverTile(_this.props.cells[row][_col].date, segs);\n        },\n        hide: function () {\n          _this.segPopoverTile.destroy();\n\n          _this.segPopoverTile = null;\n\n          _this.segPopover.destroy();\n\n          _this.segPopover = null;\n        }\n      }; // Determine horizontal coordinate.\n      // We use the moreWrap instead of the <td> to avoid border confusion.\n\n      if (isRtl) {\n        options.right = core.computeRect(moreWrap).right + 1; // +1 to be over cell border\n      } else {\n        options.left = core.computeRect(moreWrap).left - 1; // -1 to be over cell border\n      }\n\n      this.segPopover = new Popover(options);\n      this.segPopover.show();\n      calendar.releaseAfterSizingTriggers(); // hack for eventPositioned\n    }; // Given the events within an array of segment objects, reslice them to be in a single day\n\n\n    DayGrid.prototype.resliceDaySegs = function (segs, dayDate) {\n      var dayStart = dayDate;\n      var dayEnd = core.addDays(dayStart, 1);\n      var dayRange = {\n        start: dayStart,\n        end: dayEnd\n      };\n      var newSegs = [];\n\n      for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n        var seg = segs_1[_i];\n        var eventRange = seg.eventRange;\n        var origRange = eventRange.range;\n        var slicedRange = core.intersectRanges(origRange, dayRange);\n\n        if (slicedRange) {\n          newSegs.push(__assign({}, seg, {\n            eventRange: {\n              def: eventRange.def,\n              ui: __assign({}, eventRange.ui, {\n                durationEditable: false\n              }),\n              instance: eventRange.instance,\n              range: slicedRange\n            },\n            isStart: seg.isStart && slicedRange.start.valueOf() === origRange.start.valueOf(),\n            isEnd: seg.isEnd && slicedRange.end.valueOf() === origRange.end.valueOf()\n          }));\n        }\n      }\n\n      return newSegs;\n    }; // Generates the text that should be inside a \"more\" link, given the number of events it represents\n\n\n    DayGrid.prototype.getMoreLinkText = function (num) {\n      var opt = this.context.options.eventLimitText;\n\n      if (typeof opt === 'function') {\n        return opt(num);\n      } else {\n        return '+' + num + ' ' + opt;\n      }\n    }; // Returns segments within a given cell.\n    // If `startLevel` is specified, returns only events including and below that level. Otherwise returns all segs.\n\n\n    DayGrid.prototype.getCellSegs = function (row, col, startLevel) {\n      var segMatrix = this.eventRenderer.rowStructs[row].segMatrix;\n      var level = startLevel || 0;\n      var segs = [];\n      var seg;\n\n      while (level < segMatrix.length) {\n        seg = segMatrix[level][col];\n\n        if (seg) {\n          segs.push(seg);\n        }\n\n        level++;\n      }\n\n      return segs;\n    };\n\n    return DayGrid;\n  }(core.DateComponent);\n\n  var WEEK_NUM_FORMAT$1 = core.createFormatter({\n    week: 'numeric'\n  });\n  /* An abstract class for the daygrid views, as well as month view. Renders one or more rows of day cells.\n  ----------------------------------------------------------------------------------------------------------------------*/\n  // It is a manager for a DayGrid subcomponent, which does most of the heavy lifting.\n  // It is responsible for managing width/height.\n\n  var AbstractDayGridView =\n  /** @class */\n  function (_super) {\n    __extends(AbstractDayGridView, _super);\n\n    function AbstractDayGridView() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n\n      _this.processOptions = core.memoize(_this._processOptions);\n      _this.renderSkeleton = core.memoizeRendering(_this._renderSkeleton, _this._unrenderSkeleton);\n      /* Header Rendering\n      ------------------------------------------------------------------------------------------------------------------*/\n      // Generates the HTML that will go before the day-of week header cells\n\n      _this.renderHeadIntroHtml = function () {\n        var _a = _this.context,\n            theme = _a.theme,\n            options = _a.options;\n\n        if (_this.colWeekNumbersVisible) {\n          return '' + '<th class=\"fc-week-number ' + theme.getClass('widgetHeader') + '\" ' + _this.weekNumberStyleAttr() + '>' + '<span>' + // needed for matchCellWidths\n          core.htmlEscape(options.weekLabel) + '</span>' + '</th>';\n        }\n\n        return '';\n      };\n      /* Day Grid Rendering\n      ------------------------------------------------------------------------------------------------------------------*/\n      // Generates the HTML that will go before content-skeleton cells that display the day/week numbers\n\n\n      _this.renderDayGridNumberIntroHtml = function (row, dayGrid) {\n        var _a = _this.context,\n            options = _a.options,\n            dateEnv = _a.dateEnv;\n        var weekStart = dayGrid.props.cells[row][0].date;\n\n        if (_this.colWeekNumbersVisible) {\n          return '' + '<td class=\"fc-week-number\" ' + _this.weekNumberStyleAttr() + '>' + core.buildGotoAnchorHtml( // aside from link, important for matchCellWidths\n          options, dateEnv, {\n            date: weekStart,\n            type: 'week',\n            forceOff: dayGrid.colCnt === 1\n          }, dateEnv.format(weekStart, WEEK_NUM_FORMAT$1) // inner HTML\n          ) + '</td>';\n        }\n\n        return '';\n      }; // Generates the HTML that goes before the day bg cells for each day-row\n\n\n      _this.renderDayGridBgIntroHtml = function () {\n        var theme = _this.context.theme;\n\n        if (_this.colWeekNumbersVisible) {\n          return '<td class=\"fc-week-number ' + theme.getClass('widgetContent') + '\" ' + _this.weekNumberStyleAttr() + '></td>';\n        }\n\n        return '';\n      }; // Generates the HTML that goes before every other type of row generated by DayGrid.\n      // Affects mirror-skeleton and highlight-skeleton rows.\n\n\n      _this.renderDayGridIntroHtml = function () {\n        if (_this.colWeekNumbersVisible) {\n          return '<td class=\"fc-week-number\" ' + _this.weekNumberStyleAttr() + '></td>';\n        }\n\n        return '';\n      };\n\n      return _this;\n    }\n\n    AbstractDayGridView.prototype._processOptions = function (options) {\n      if (options.weekNumbers) {\n        if (options.weekNumbersWithinDays) {\n          this.cellWeekNumbersVisible = true;\n          this.colWeekNumbersVisible = false;\n        } else {\n          this.cellWeekNumbersVisible = false;\n          this.colWeekNumbersVisible = true;\n        }\n      } else {\n        this.colWeekNumbersVisible = false;\n        this.cellWeekNumbersVisible = false;\n      }\n    };\n\n    AbstractDayGridView.prototype.render = function (props, context) {\n      _super.prototype.render.call(this, props, context);\n\n      this.processOptions(context.options);\n      this.renderSkeleton(context);\n    };\n\n    AbstractDayGridView.prototype.destroy = function () {\n      _super.prototype.destroy.call(this);\n\n      this.renderSkeleton.unrender();\n    };\n\n    AbstractDayGridView.prototype._renderSkeleton = function (context) {\n      this.el.classList.add('fc-dayGrid-view');\n      this.el.innerHTML = this.renderSkeletonHtml();\n      this.scroller = new core.ScrollComponent('hidden', // overflow x\n      'auto' // overflow y\n      );\n      var dayGridContainerEl = this.scroller.el;\n      this.el.querySelector('.fc-body > tr > td').appendChild(dayGridContainerEl);\n      dayGridContainerEl.classList.add('fc-day-grid-container');\n      var dayGridEl = core.createElement('div', {\n        className: 'fc-day-grid'\n      });\n      dayGridContainerEl.appendChild(dayGridEl);\n      this.dayGrid = new DayGrid(dayGridEl, {\n        renderNumberIntroHtml: this.renderDayGridNumberIntroHtml,\n        renderBgIntroHtml: this.renderDayGridBgIntroHtml,\n        renderIntroHtml: this.renderDayGridIntroHtml,\n        colWeekNumbersVisible: this.colWeekNumbersVisible,\n        cellWeekNumbersVisible: this.cellWeekNumbersVisible\n      });\n    };\n\n    AbstractDayGridView.prototype._unrenderSkeleton = function () {\n      this.el.classList.remove('fc-dayGrid-view');\n      this.dayGrid.destroy();\n      this.scroller.destroy();\n    }; // Builds the HTML skeleton for the view.\n    // The day-grid component will render inside of a container defined by this HTML.\n\n\n    AbstractDayGridView.prototype.renderSkeletonHtml = function () {\n      var _a = this.context,\n          theme = _a.theme,\n          options = _a.options;\n      return '' + '<table class=\"' + theme.getClass('tableGrid') + '\">' + (options.columnHeader ? '<thead class=\"fc-head\">' + '<tr>' + '<td class=\"fc-head-container ' + theme.getClass('widgetHeader') + '\">&nbsp;</td>' + '</tr>' + '</thead>' : '') + '<tbody class=\"fc-body\">' + '<tr>' + '<td class=\"' + theme.getClass('widgetContent') + '\"></td>' + '</tr>' + '</tbody>' + '</table>';\n    }; // Generates an HTML attribute string for setting the width of the week number column, if it is known\n\n\n    AbstractDayGridView.prototype.weekNumberStyleAttr = function () {\n      if (this.weekNumberWidth != null) {\n        return 'style=\"width:' + this.weekNumberWidth + 'px\"';\n      }\n\n      return '';\n    }; // Determines whether each row should have a constant height\n\n\n    AbstractDayGridView.prototype.hasRigidRows = function () {\n      var eventLimit = this.context.options.eventLimit;\n      return eventLimit && typeof eventLimit !== 'number';\n    };\n    /* Dimensions\n    ------------------------------------------------------------------------------------------------------------------*/\n\n\n    AbstractDayGridView.prototype.updateSize = function (isResize, viewHeight, isAuto) {\n      _super.prototype.updateSize.call(this, isResize, viewHeight, isAuto); // will call updateBaseSize. important that executes first\n\n\n      this.dayGrid.updateSize(isResize);\n    }; // Refreshes the horizontal dimensions of the view\n\n\n    AbstractDayGridView.prototype.updateBaseSize = function (isResize, viewHeight, isAuto) {\n      var dayGrid = this.dayGrid;\n      var eventLimit = this.context.options.eventLimit;\n      var headRowEl = this.header ? this.header.el : null; // HACK\n\n      var scrollerHeight;\n      var scrollbarWidths; // hack to give the view some height prior to dayGrid's columns being rendered\n      // TODO: separate setting height from scroller VS dayGrid.\n\n      if (!dayGrid.rowEls) {\n        if (!isAuto) {\n          scrollerHeight = this.computeScrollerHeight(viewHeight);\n          this.scroller.setHeight(scrollerHeight);\n        }\n\n        return;\n      }\n\n      if (this.colWeekNumbersVisible) {\n        // Make sure all week number cells running down the side have the same width.\n        this.weekNumberWidth = core.matchCellWidths(core.findElements(this.el, '.fc-week-number'));\n      } // reset all heights to be natural\n\n\n      this.scroller.clear();\n\n      if (headRowEl) {\n        core.uncompensateScroll(headRowEl);\n      }\n\n      dayGrid.removeSegPopover(); // kill the \"more\" popover if displayed\n      // is the event limit a constant level number?\n\n      if (eventLimit && typeof eventLimit === 'number') {\n        dayGrid.limitRows(eventLimit); // limit the levels first so the height can redistribute after\n      } // distribute the height to the rows\n      // (viewHeight is a \"recommended\" value if isAuto)\n\n\n      scrollerHeight = this.computeScrollerHeight(viewHeight);\n      this.setGridHeight(scrollerHeight, isAuto); // is the event limit dynamically calculated?\n\n      if (eventLimit && typeof eventLimit !== 'number') {\n        dayGrid.limitRows(eventLimit); // limit the levels after the grid's row heights have been set\n      }\n\n      if (!isAuto) {\n        // should we force dimensions of the scroll container?\n        this.scroller.setHeight(scrollerHeight);\n        scrollbarWidths = this.scroller.getScrollbarWidths();\n\n        if (scrollbarWidths.left || scrollbarWidths.right) {\n          // using scrollbars?\n          if (headRowEl) {\n            core.compensateScroll(headRowEl, scrollbarWidths);\n          } // doing the scrollbar compensation might have created text overflow which created more height. redo\n\n\n          scrollerHeight = this.computeScrollerHeight(viewHeight);\n          this.scroller.setHeight(scrollerHeight);\n        } // guarantees the same scrollbar widths\n\n\n        this.scroller.lockOverflow(scrollbarWidths);\n      }\n    }; // given a desired total height of the view, returns what the height of the scroller should be\n\n\n    AbstractDayGridView.prototype.computeScrollerHeight = function (viewHeight) {\n      return viewHeight - core.subtractInnerElHeight(this.el, this.scroller.el); // everything that's NOT the scroller\n    }; // Sets the height of just the DayGrid component in this view\n\n\n    AbstractDayGridView.prototype.setGridHeight = function (height, isAuto) {\n      if (this.context.options.monthMode) {\n        // if auto, make the height of each row the height that it would be if there were 6 weeks\n        if (isAuto) {\n          height *= this.dayGrid.rowCnt / 6;\n        }\n\n        core.distributeHeight(this.dayGrid.rowEls, height, !isAuto); // if auto, don't compensate for height-hogging rows\n      } else {\n        if (isAuto) {\n          core.undistributeHeight(this.dayGrid.rowEls); // let the rows be their natural height with no expanding\n        } else {\n          core.distributeHeight(this.dayGrid.rowEls, height, true); // true = compensate for height-hogging rows\n        }\n      }\n    };\n    /* Scroll\n    ------------------------------------------------------------------------------------------------------------------*/\n\n\n    AbstractDayGridView.prototype.computeDateScroll = function (duration) {\n      return {\n        top: 0\n      };\n    };\n\n    AbstractDayGridView.prototype.queryDateScroll = function () {\n      return {\n        top: this.scroller.getScrollTop()\n      };\n    };\n\n    AbstractDayGridView.prototype.applyDateScroll = function (scroll) {\n      if (scroll.top !== undefined) {\n        this.scroller.setScrollTop(scroll.top);\n      }\n    };\n\n    return AbstractDayGridView;\n  }(core.View);\n\n  AbstractDayGridView.prototype.dateProfileGeneratorClass = DayGridDateProfileGenerator;\n\n  var SimpleDayGrid =\n  /** @class */\n  function (_super) {\n    __extends(SimpleDayGrid, _super);\n\n    function SimpleDayGrid(dayGrid) {\n      var _this = _super.call(this, dayGrid.el) || this;\n\n      _this.slicer = new DayGridSlicer();\n      _this.dayGrid = dayGrid;\n      return _this;\n    }\n\n    SimpleDayGrid.prototype.firstContext = function (context) {\n      context.calendar.registerInteractiveComponent(this, {\n        el: this.dayGrid.el\n      });\n    };\n\n    SimpleDayGrid.prototype.destroy = function () {\n      _super.prototype.destroy.call(this);\n\n      this.context.calendar.unregisterInteractiveComponent(this);\n    };\n\n    SimpleDayGrid.prototype.render = function (props, context) {\n      var dayGrid = this.dayGrid;\n      var dateProfile = props.dateProfile,\n          dayTable = props.dayTable;\n      dayGrid.receiveProps(__assign({}, this.slicer.sliceProps(props, dateProfile, props.nextDayThreshold, context.calendar, dayGrid, dayTable), {\n        dateProfile: dateProfile,\n        cells: dayTable.cells,\n        isRigid: props.isRigid\n      }), context);\n    };\n\n    SimpleDayGrid.prototype.buildPositionCaches = function () {\n      this.dayGrid.buildPositionCaches();\n    };\n\n    SimpleDayGrid.prototype.queryHit = function (positionLeft, positionTop) {\n      var rawHit = this.dayGrid.positionToHit(positionLeft, positionTop);\n\n      if (rawHit) {\n        return {\n          component: this.dayGrid,\n          dateSpan: rawHit.dateSpan,\n          dayEl: rawHit.dayEl,\n          rect: {\n            left: rawHit.relativeRect.left,\n            right: rawHit.relativeRect.right,\n            top: rawHit.relativeRect.top,\n            bottom: rawHit.relativeRect.bottom\n          },\n          layer: 0\n        };\n      }\n    };\n\n    return SimpleDayGrid;\n  }(core.DateComponent);\n\n  var DayGridSlicer =\n  /** @class */\n  function (_super) {\n    __extends(DayGridSlicer, _super);\n\n    function DayGridSlicer() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    DayGridSlicer.prototype.sliceRange = function (dateRange, dayTable) {\n      return dayTable.sliceRange(dateRange);\n    };\n\n    return DayGridSlicer;\n  }(core.Slicer);\n\n  var DayGridView =\n  /** @class */\n  function (_super) {\n    __extends(DayGridView, _super);\n\n    function DayGridView() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n\n      _this.buildDayTable = core.memoize(buildDayTable);\n      return _this;\n    }\n\n    DayGridView.prototype.render = function (props, context) {\n      _super.prototype.render.call(this, props, context); // will call _renderSkeleton/_unrenderSkeleton\n\n\n      var dateProfile = this.props.dateProfile;\n      var dayTable = this.dayTable = this.buildDayTable(dateProfile, props.dateProfileGenerator);\n\n      if (this.header) {\n        this.header.receiveProps({\n          dateProfile: dateProfile,\n          dates: dayTable.headerDates,\n          datesRepDistinctDays: dayTable.rowCnt === 1,\n          renderIntroHtml: this.renderHeadIntroHtml\n        }, context);\n      }\n\n      this.simpleDayGrid.receiveProps({\n        dateProfile: dateProfile,\n        dayTable: dayTable,\n        businessHours: props.businessHours,\n        dateSelection: props.dateSelection,\n        eventStore: props.eventStore,\n        eventUiBases: props.eventUiBases,\n        eventSelection: props.eventSelection,\n        eventDrag: props.eventDrag,\n        eventResize: props.eventResize,\n        isRigid: this.hasRigidRows(),\n        nextDayThreshold: this.context.nextDayThreshold\n      }, context);\n    };\n\n    DayGridView.prototype._renderSkeleton = function (context) {\n      _super.prototype._renderSkeleton.call(this, context);\n\n      if (context.options.columnHeader) {\n        this.header = new core.DayHeader(this.el.querySelector('.fc-head-container'));\n      }\n\n      this.simpleDayGrid = new SimpleDayGrid(this.dayGrid);\n    };\n\n    DayGridView.prototype._unrenderSkeleton = function () {\n      _super.prototype._unrenderSkeleton.call(this);\n\n      if (this.header) {\n        this.header.destroy();\n      }\n\n      this.simpleDayGrid.destroy();\n    };\n\n    return DayGridView;\n  }(AbstractDayGridView);\n\n  function buildDayTable(dateProfile, dateProfileGenerator) {\n    var daySeries = new core.DaySeries(dateProfile.renderRange, dateProfileGenerator);\n    return new core.DayTable(daySeries, /year|month|week/.test(dateProfile.currentRangeUnit));\n  }\n\n  var main = core.createPlugin({\n    defaultView: 'dayGridMonth',\n    views: {\n      dayGrid: DayGridView,\n      dayGridDay: {\n        type: 'dayGrid',\n        duration: {\n          days: 1\n        }\n      },\n      dayGridWeek: {\n        type: 'dayGrid',\n        duration: {\n          weeks: 1\n        }\n      },\n      dayGridMonth: {\n        type: 'dayGrid',\n        duration: {\n          months: 1\n        },\n        monthMode: true,\n        fixedWeekCount: true\n      }\n    }\n  });\n  exports.AbstractDayGridView = AbstractDayGridView;\n  exports.DayBgRow = DayBgRow;\n  exports.DayGrid = DayGrid;\n  exports.DayGridSlicer = DayGridSlicer;\n  exports.DayGridView = DayGridView;\n  exports.SimpleDayGrid = SimpleDayGrid;\n  exports.buildBasicDayTable = buildDayTable;\n  exports.default = main;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"sources":["C:/Users/Arij/projects/theone/src/assets/packages/daygrid/main.js"],"names":["global","factory","exports","module","require","define","amd","self","FullCalendarDayGrid","FullCalendar","core","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","DayGridDateProfileGenerator","_super","buildRenderRange","currentRange","currentRangeUnit","isRangeAllDay","dateEnv","renderRange","start","end","endOfWeek","test","startOfWeek","valueOf","addWeeks","options","monthMode","fixedWeekCount","rowCnt","Math","ceil","diffWeeks","DateProfileGenerator","Popover","_this","isHidden","margin","documentMousedown","ev","el","contains","target","hide","show","render","style","display","position","trigger","createElement","className","top","left","content","parentEl","appendChild","listenBySelector","autoHide","document","addEventListener","destroy","removeElement","removeEventListener","elDims","getBoundingClientRect","origin","computeRect","offsetParent","clippingRect","computeClippingRect","undefined","right","width","min","bottom","height","max","applyStyle","name","slice","SimpleDayGridEventRenderer","renderSegHtml","seg","mirrorInfo","context","eventRange","eventDef","def","eventUi","ui","allDay","isDraggable","computeEventDraggable","isResizableFromStart","isStart","computeEventStartResizable","isResizableFromEnd","isEnd","computeEventEndResizable","classes","getSegClasses","skinCss","cssToStr","getSkinCss","timeHtml","timeText","titleHtml","unshift","getTimeText","htmlEscape","title","join","url","dir","computeEventTimeFormat","hour","minute","omitZeroMinute","meridiem","computeDisplayEventEnd","FgEventRenderer","DayGridEventRenderer","dayGrid","attachSegs","segs","rowStructs","renderSegRows","rowEls","forEach","rowNode","querySelector","tbodyEl","removeSegPopover","detachSegs","rowStruct","pop","segRows","row","groupSegRows","push","renderSegRow","rowSegs","isRtl","colCnt","segLevels","buildSegLevels","levelCnt","tbody","segMatrix","cellMatrix","loneCellMatrix","levelSegs","col","tr","j","td","emptyCellsUntil","endCol","rowSpan","leftCol","lastCol","firstCol","rightCol","colSpan","introHtml","renderProps","renderIntroHtml","appendToElement","prependToElement","levels","sortEventSegs","isDaySegCollision","level","sort","compareDaySegCols","otherSegs","otherSeg","a","DayGridMirrorRenderer","sourceSeg","skeletonEl","htmlToElement","skeletonTopEl","skeletonTop","EMPTY_CELL_HTML","DayGridFillRenderer","fillSegTag","renderSegs","type","filter","els","renderFillRow","startCol","trEl","toLowerCase","getElementsByTagName","FillRenderer","DayTile","eventRenderer","DayTileEventRenderer","renderFrame","memoizeRendering","_renderFrame","renderFgEvents","bind","unrender","renderEventSelection","selectByInstanceId","unselectByInstanceId","renderEventDrag","hideByHash","showByHash","renderEventResize","firstContext","calendar","registerInteractiveComponent","useEventCenter","props","date","fgSegs","eventSelection","eventDragInstances","eventResizeInstances","unregisterInteractiveComponent","_a","theme","format","createFormatter","dayPopoverFormat","innerHTML","getClass","getIconClass","segContainerEl","queryHit","positionLeft","positionTop","elWidth","elHeight","component","dateSpan","range","addDays","dayEl","rect","layer","DateComponent","dayTile","_i","segs_1","segs_2","DayBgRow","renderHtml","parts","cells","cell","renderCellHtml","dateProfile","htmlAttrs","reverse","otherAttrs","isDateValid","rangeContainsMarker","activeRange","getDayClasses","formatIso","omitTime","DAY_NUM_FORMAT","day","WEEK_NUM_FORMAT","week","DayGrid","bottomCoordPadding","isCellSizesDirty","fillRenderer","mirrorRenderer","renderCells","_renderCells","_unrenderCells","renderBusinessHours","renderDateSelection","renderBgEvents","_renderEventDrag","_unrenderEventDrag","_renderEventResize","_unrenderEventResize","isRigid","businessHourSegs","dateSelectionSegs","bgEventSegs","fgEventSegs","eventDrag","eventResize","segPopoverTile","updateSegPopoverTile","getCellRange","ownProps","receiveProps","affectedInstances","view","_b","html","renderDayRowHtml","findElements","cellEls","rowPositions","PositionCache","colPositions","publiclyTrigger","toDate","getCellEl","bgRow","renderBgIntroHtml","getIsNumbersVisible","renderNumberTrHtml","getIsDayNumbersVisible","cellWeekNumbersVisible","colWeekNumbersVisible","intro","renderNumberIntroHtml","renderNumberCellsHtml","htmls","renderNumberCellHtml","isDayNumberVisible","weekCalcFirstDow","weekDow","getUTCDay","buildGotoAnchorHtml","updateSize","isResize","isEventsUpdated","buildPositionCaches","computeSizes","assignSizes","buildColPositions","buildRowPositions","build","bottoms","positionToHit","leftPosition","topPosition","leftToIndex","topToIndex","relativeRect","lefts","rights","tops","state","isResizing","segPopover","limitRows","levelLimit","rowLevelLimit","unlimitRow","computeRowLevelLimit","limitRow","rowEl","rowBottom","trEls","findChildren","classList","remove","moreNodes","limitedNodes","segsBelow","totalSegsBelow","colSegsBelow","segMoreNodes","moreTd","moreWrap","moreLink","getCellSegs","renderMoreLink","node","add","concat","insertAfterElement","moreEls","limitedEls","limitedEl","hiddenSegs","innerText","getMoreLinkText","clickOption","eventLimitClick","_col","moreEl","currentTarget","allSegs","reslicedAllSegs","resliceDaySegs","reslicedHiddenSegs","jsEvent","showSegPopover","zoomTo","parentNode","topEl","releaseAfterSizingTriggers","dayDate","dayStart","dayEnd","dayRange","newSegs","origRange","slicedRange","intersectRanges","durationEditable","instance","num","opt","eventLimitText","startLevel","WEEK_NUM_FORMAT$1","AbstractDayGridView","processOptions","memoize","_processOptions","renderSkeleton","_renderSkeleton","_unrenderSkeleton","renderHeadIntroHtml","weekNumberStyleAttr","weekLabel","renderDayGridNumberIntroHtml","weekStart","forceOff","renderDayGridBgIntroHtml","renderDayGridIntroHtml","weekNumbers","weekNumbersWithinDays","renderSkeletonHtml","scroller","ScrollComponent","dayGridContainerEl","dayGridEl","columnHeader","weekNumberWidth","hasRigidRows","eventLimit","viewHeight","isAuto","updateBaseSize","headRowEl","header","scrollerHeight","scrollbarWidths","computeScrollerHeight","setHeight","matchCellWidths","clear","uncompensateScroll","setGridHeight","getScrollbarWidths","compensateScroll","lockOverflow","subtractInnerElHeight","distributeHeight","undistributeHeight","computeDateScroll","duration","queryDateScroll","getScrollTop","applyDateScroll","scroll","setScrollTop","View","dateProfileGeneratorClass","SimpleDayGrid","slicer","DayGridSlicer","dayTable","sliceProps","nextDayThreshold","rawHit","sliceRange","dateRange","Slicer","DayGridView","buildDayTable","dateProfileGenerator","dates","headerDates","datesRepDistinctDays","simpleDayGrid","businessHours","dateSelection","eventStore","eventUiBases","DayHeader","daySeries","DaySeries","DayTable","main","createPlugin","defaultView","views","dayGridDay","days","dayGridWeek","weeks","dayGridMonth","months","buildBasicDayTable","default","defineProperty","value"],"mappings":"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","sourcesContent":["/*!\nFullCalendar Day Grid Plugin v4.4.0\nDocs & License: https://fullcalendar.io/\n(c) 2019 Adam Shaw\n*/\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@fullcalendar/core')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@fullcalendar/core'], factory) :\n    (global = global || self, factory(global.FullCalendarDayGrid = {}, global.FullCalendar));\n}(this, function (exports, core) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\n\n    var DayGridDateProfileGenerator = /** @class */ (function (_super) {\n        __extends(DayGridDateProfileGenerator, _super);\n        function DayGridDateProfileGenerator() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        // Computes the date range that will be rendered.\n        DayGridDateProfileGenerator.prototype.buildRenderRange = function (currentRange, currentRangeUnit, isRangeAllDay) {\n            var dateEnv = this.dateEnv;\n            var renderRange = _super.prototype.buildRenderRange.call(this, currentRange, currentRangeUnit, isRangeAllDay);\n            var start = renderRange.start;\n            var end = renderRange.end;\n            var endOfWeek;\n            // year and month views should be aligned with weeks. this is already done for week\n            if (/^(year|month)$/.test(currentRangeUnit)) {\n                start = dateEnv.startOfWeek(start);\n                // make end-of-week if not already\n                endOfWeek = dateEnv.startOfWeek(end);\n                if (endOfWeek.valueOf() !== end.valueOf()) {\n                    end = core.addWeeks(endOfWeek, 1);\n                }\n            }\n            // ensure 6 weeks\n            if (this.options.monthMode &&\n                this.options.fixedWeekCount) {\n                var rowCnt = Math.ceil(// could be partial weeks due to hiddenDays\n                core.diffWeeks(start, end));\n                end = core.addWeeks(end, 6 - rowCnt);\n            }\n            return { start: start, end: end };\n        };\n        return DayGridDateProfileGenerator;\n    }(core.DateProfileGenerator));\n\n    /* A rectangular panel that is absolutely positioned over other content\n    ------------------------------------------------------------------------------------------------------------------------\n    Options:\n      - className (string)\n      - content (HTML string, element, or element array)\n      - parentEl\n      - top\n      - left\n      - right (the x coord of where the right edge should be. not a \"CSS\" right)\n      - autoHide (boolean)\n      - show (callback)\n      - hide (callback)\n    */\n    var Popover = /** @class */ (function () {\n        function Popover(options) {\n            var _this = this;\n            this.isHidden = true;\n            this.margin = 10; // the space required between the popover and the edges of the scroll container\n            // Triggered when the user clicks *anywhere* in the document, for the autoHide feature\n            this.documentMousedown = function (ev) {\n                // only hide the popover if the click happened outside the popover\n                if (_this.el && !_this.el.contains(ev.target)) {\n                    _this.hide();\n                }\n            };\n            this.options = options;\n        }\n        // Shows the popover on the specified position. Renders it if not already\n        Popover.prototype.show = function () {\n            if (this.isHidden) {\n                if (!this.el) {\n                    this.render();\n                }\n                this.el.style.display = '';\n                this.position();\n                this.isHidden = false;\n                this.trigger('show');\n            }\n        };\n        // Hides the popover, through CSS, but does not remove it from the DOM\n        Popover.prototype.hide = function () {\n            if (!this.isHidden) {\n                this.el.style.display = 'none';\n                this.isHidden = true;\n                this.trigger('hide');\n            }\n        };\n        // Creates `this.el` and renders content inside of it\n        Popover.prototype.render = function () {\n            var _this = this;\n            var options = this.options;\n            var el = this.el = core.createElement('div', {\n                className: 'fc-popover ' + (options.className || ''),\n                style: {\n                    top: '0',\n                    left: '0'\n                }\n            });\n            if (typeof options.content === 'function') {\n                options.content(el);\n            }\n            options.parentEl.appendChild(el);\n            // when a click happens on anything inside with a 'fc-close' className, hide the popover\n            core.listenBySelector(el, 'click', '.fc-close', function (ev) {\n                _this.hide();\n            });\n            if (options.autoHide) {\n                document.addEventListener('mousedown', this.documentMousedown);\n            }\n        };\n        // Hides and unregisters any handlers\n        Popover.prototype.destroy = function () {\n            this.hide();\n            if (this.el) {\n                core.removeElement(this.el);\n                this.el = null;\n            }\n            document.removeEventListener('mousedown', this.documentMousedown);\n        };\n        // Positions the popover optimally, using the top/left/right options\n        Popover.prototype.position = function () {\n            var options = this.options;\n            var el = this.el;\n            var elDims = el.getBoundingClientRect(); // only used for width,height\n            var origin = core.computeRect(el.offsetParent);\n            var clippingRect = core.computeClippingRect(options.parentEl);\n            var top; // the \"position\" (not \"offset\") values for the popover\n            var left; //\n            // compute top and left\n            top = options.top || 0;\n            if (options.left !== undefined) {\n                left = options.left;\n            }\n            else if (options.right !== undefined) {\n                left = options.right - elDims.width; // derive the left value from the right value\n            }\n            else {\n                left = 0;\n            }\n            // constrain to the view port. if constrained by two edges, give precedence to top/left\n            top = Math.min(top, clippingRect.bottom - elDims.height - this.margin);\n            top = Math.max(top, clippingRect.top + this.margin);\n            left = Math.min(left, clippingRect.right - elDims.width - this.margin);\n            left = Math.max(left, clippingRect.left + this.margin);\n            core.applyStyle(el, {\n                top: top - origin.top,\n                left: left - origin.left\n            });\n        };\n        // Triggers a callback. Calls a function in the option hash of the same name.\n        // Arguments beyond the first `name` are forwarded on.\n        // TODO: better code reuse for this. Repeat code\n        // can kill this???\n        Popover.prototype.trigger = function (name) {\n            if (this.options[name]) {\n                this.options[name].apply(this, Array.prototype.slice.call(arguments, 1));\n            }\n        };\n        return Popover;\n    }());\n\n    /* Event-rendering methods for the DayGrid class\n    ----------------------------------------------------------------------------------------------------------------------*/\n    // \"Simple\" is bad a name. has nothing to do with SimpleDayGrid\n    var SimpleDayGridEventRenderer = /** @class */ (function (_super) {\n        __extends(SimpleDayGridEventRenderer, _super);\n        function SimpleDayGridEventRenderer() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        // Builds the HTML to be used for the default element for an individual segment\n        SimpleDayGridEventRenderer.prototype.renderSegHtml = function (seg, mirrorInfo) {\n            var context = this.context;\n            var eventRange = seg.eventRange;\n            var eventDef = eventRange.def;\n            var eventUi = eventRange.ui;\n            var allDay = eventDef.allDay;\n            var isDraggable = core.computeEventDraggable(context, eventDef, eventUi);\n            var isResizableFromStart = allDay && seg.isStart && core.computeEventStartResizable(context, eventDef, eventUi);\n            var isResizableFromEnd = allDay && seg.isEnd && core.computeEventEndResizable(context, eventDef, eventUi);\n            var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd, mirrorInfo);\n            var skinCss = core.cssToStr(this.getSkinCss(eventUi));\n            var timeHtml = '';\n            var timeText;\n            var titleHtml;\n            classes.unshift('fc-day-grid-event', 'fc-h-event');\n            // Only display a timed events time if it is the starting segment\n            if (seg.isStart) {\n                timeText = this.getTimeText(eventRange);\n                if (timeText) {\n                    timeHtml = '<span class=\"fc-time\">' + core.htmlEscape(timeText) + '</span>';\n                }\n            }\n            titleHtml =\n                '<span class=\"fc-title\">' +\n                    (core.htmlEscape(eventDef.title || '') || '&nbsp;') + // we always want one line of height\n                    '</span>';\n            return '<a class=\"' + classes.join(' ') + '\"' +\n                (eventDef.url ?\n                    ' href=\"' + core.htmlEscape(eventDef.url) + '\"' :\n                    '') +\n                (skinCss ?\n                    ' style=\"' + skinCss + '\"' :\n                    '') +\n                '>' +\n                '<div class=\"fc-content\">' +\n                (context.options.dir === 'rtl' ?\n                    titleHtml + ' ' + timeHtml : // put a natural space in between\n                    timeHtml + ' ' + titleHtml //\n                ) +\n                '</div>' +\n                (isResizableFromStart ?\n                    '<div class=\"fc-resizer fc-start-resizer\"></div>' :\n                    '') +\n                (isResizableFromEnd ?\n                    '<div class=\"fc-resizer fc-end-resizer\"></div>' :\n                    '') +\n                '</a>';\n        };\n        // Computes a default event time formatting string if `eventTimeFormat` is not explicitly defined\n        SimpleDayGridEventRenderer.prototype.computeEventTimeFormat = function () {\n            return {\n                hour: 'numeric',\n                minute: '2-digit',\n                omitZeroMinute: true,\n                meridiem: 'narrow'\n            };\n        };\n        SimpleDayGridEventRenderer.prototype.computeDisplayEventEnd = function () {\n            return false; // TODO: somehow consider the originating DayGrid's column count\n        };\n        return SimpleDayGridEventRenderer;\n    }(core.FgEventRenderer));\n\n    /* Event-rendering methods for the DayGrid class\n    ----------------------------------------------------------------------------------------------------------------------*/\n    var DayGridEventRenderer = /** @class */ (function (_super) {\n        __extends(DayGridEventRenderer, _super);\n        function DayGridEventRenderer(dayGrid) {\n            var _this = _super.call(this) || this;\n            _this.dayGrid = dayGrid;\n            return _this;\n        }\n        // Renders the given foreground event segments onto the grid\n        DayGridEventRenderer.prototype.attachSegs = function (segs, mirrorInfo) {\n            var rowStructs = this.rowStructs = this.renderSegRows(segs);\n            // append to each row's content skeleton\n            this.dayGrid.rowEls.forEach(function (rowNode, i) {\n                rowNode.querySelector('.fc-content-skeleton > table').appendChild(rowStructs[i].tbodyEl);\n            });\n            // removes the \"more..\" events popover\n            if (!mirrorInfo) {\n                this.dayGrid.removeSegPopover();\n            }\n        };\n        // Unrenders all currently rendered foreground event segments\n        DayGridEventRenderer.prototype.detachSegs = function () {\n            var rowStructs = this.rowStructs || [];\n            var rowStruct;\n            while ((rowStruct = rowStructs.pop())) {\n                core.removeElement(rowStruct.tbodyEl);\n            }\n            this.rowStructs = null;\n        };\n        // Uses the given events array to generate <tbody> elements that should be appended to each row's content skeleton.\n        // Returns an array of rowStruct objects (see the bottom of `renderSegRow`).\n        // PRECONDITION: each segment shoud already have a rendered and assigned `.el`\n        DayGridEventRenderer.prototype.renderSegRows = function (segs) {\n            var rowStructs = [];\n            var segRows;\n            var row;\n            segRows = this.groupSegRows(segs); // group into nested arrays\n            // iterate each row of segment groupings\n            for (row = 0; row < segRows.length; row++) {\n                rowStructs.push(this.renderSegRow(row, segRows[row]));\n            }\n            return rowStructs;\n        };\n        // Given a row # and an array of segments all in the same row, render a <tbody> element, a skeleton that contains\n        // the segments. Returns object with a bunch of internal data about how the render was calculated.\n        // NOTE: modifies rowSegs\n        DayGridEventRenderer.prototype.renderSegRow = function (row, rowSegs) {\n            var isRtl = this.context.isRtl;\n            var dayGrid = this.dayGrid;\n            var colCnt = dayGrid.colCnt;\n            var segLevels = this.buildSegLevels(rowSegs); // group into sub-arrays of levels\n            var levelCnt = Math.max(1, segLevels.length); // ensure at least one level\n            var tbody = document.createElement('tbody');\n            var segMatrix = []; // lookup for which segments are rendered into which level+col cells\n            var cellMatrix = []; // lookup for all <td> elements of the level+col matrix\n            var loneCellMatrix = []; // lookup for <td> elements that only take up a single column\n            var i;\n            var levelSegs;\n            var col;\n            var tr;\n            var j;\n            var seg;\n            var td;\n            // populates empty cells from the current column (`col`) to `endCol`\n            function emptyCellsUntil(endCol) {\n                while (col < endCol) {\n                    // try to grab a cell from the level above and extend its rowspan. otherwise, create a fresh cell\n                    td = (loneCellMatrix[i - 1] || [])[col];\n                    if (td) {\n                        td.rowSpan = (td.rowSpan || 1) + 1;\n                    }\n                    else {\n                        td = document.createElement('td');\n                        tr.appendChild(td);\n                    }\n                    cellMatrix[i][col] = td;\n                    loneCellMatrix[i][col] = td;\n                    col++;\n                }\n            }\n            for (i = 0; i < levelCnt; i++) { // iterate through all levels\n                levelSegs = segLevels[i];\n                col = 0;\n                tr = document.createElement('tr');\n                segMatrix.push([]);\n                cellMatrix.push([]);\n                loneCellMatrix.push([]);\n                // levelCnt might be 1 even though there are no actual levels. protect against this.\n                // this single empty row is useful for styling.\n                if (levelSegs) {\n                    for (j = 0; j < levelSegs.length; j++) { // iterate through segments in level\n                        seg = levelSegs[j];\n                        var leftCol = isRtl ? (colCnt - 1 - seg.lastCol) : seg.firstCol;\n                        var rightCol = isRtl ? (colCnt - 1 - seg.firstCol) : seg.lastCol;\n                        emptyCellsUntil(leftCol);\n                        // create a container that occupies or more columns. append the event element.\n                        td = core.createElement('td', { className: 'fc-event-container' }, seg.el);\n                        if (leftCol !== rightCol) {\n                            td.colSpan = rightCol - leftCol + 1;\n                        }\n                        else { // a single-column segment\n                            loneCellMatrix[i][col] = td;\n                        }\n                        while (col <= rightCol) {\n                            cellMatrix[i][col] = td;\n                            segMatrix[i][col] = seg;\n                            col++;\n                        }\n                        tr.appendChild(td);\n                    }\n                }\n                emptyCellsUntil(colCnt); // finish off the row\n                var introHtml = dayGrid.renderProps.renderIntroHtml();\n                if (introHtml) {\n                    if (isRtl) {\n                        core.appendToElement(tr, introHtml);\n                    }\n                    else {\n                        core.prependToElement(tr, introHtml);\n                    }\n                }\n                tbody.appendChild(tr);\n            }\n            return {\n                row: row,\n                tbodyEl: tbody,\n                cellMatrix: cellMatrix,\n                segMatrix: segMatrix,\n                segLevels: segLevels,\n                segs: rowSegs\n            };\n        };\n        // Stacks a flat array of segments, which are all assumed to be in the same row, into subarrays of vertical levels.\n        // NOTE: modifies segs\n        DayGridEventRenderer.prototype.buildSegLevels = function (segs) {\n            var isRtl = this.context.isRtl;\n            var colCnt = this.dayGrid.colCnt;\n            var levels = [];\n            var i;\n            var seg;\n            var j;\n            // Give preference to elements with certain criteria, so they have\n            // a chance to be closer to the top.\n            segs = this.sortEventSegs(segs);\n            for (i = 0; i < segs.length; i++) {\n                seg = segs[i];\n                // loop through levels, starting with the topmost, until the segment doesn't collide with other segments\n                for (j = 0; j < levels.length; j++) {\n                    if (!isDaySegCollision(seg, levels[j])) {\n                        break;\n                    }\n                }\n                // `j` now holds the desired subrow index\n                seg.level = j;\n                seg.leftCol = isRtl ? (colCnt - 1 - seg.lastCol) : seg.firstCol; // for sorting only\n                seg.rightCol = isRtl ? (colCnt - 1 - seg.firstCol) : seg.lastCol // for sorting only\n                ;\n                (levels[j] || (levels[j] = [])).push(seg);\n            }\n            // order segments left-to-right. very important if calendar is RTL\n            for (j = 0; j < levels.length; j++) {\n                levels[j].sort(compareDaySegCols);\n            }\n            return levels;\n        };\n        // Given a flat array of segments, return an array of sub-arrays, grouped by each segment's row\n        DayGridEventRenderer.prototype.groupSegRows = function (segs) {\n            var segRows = [];\n            var i;\n            for (i = 0; i < this.dayGrid.rowCnt; i++) {\n                segRows.push([]);\n            }\n            for (i = 0; i < segs.length; i++) {\n                segRows[segs[i].row].push(segs[i]);\n            }\n            return segRows;\n        };\n        // Computes a default `displayEventEnd` value if one is not expliclty defined\n        DayGridEventRenderer.prototype.computeDisplayEventEnd = function () {\n            return this.dayGrid.colCnt === 1; // we'll likely have space if there's only one day\n        };\n        return DayGridEventRenderer;\n    }(SimpleDayGridEventRenderer));\n    // Computes whether two segments' columns collide. They are assumed to be in the same row.\n    function isDaySegCollision(seg, otherSegs) {\n        var i;\n        var otherSeg;\n        for (i = 0; i < otherSegs.length; i++) {\n            otherSeg = otherSegs[i];\n            if (otherSeg.firstCol <= seg.lastCol &&\n                otherSeg.lastCol >= seg.firstCol) {\n                return true;\n            }\n        }\n        return false;\n    }\n    // A cmp function for determining the leftmost event\n    function compareDaySegCols(a, b) {\n        return a.leftCol - b.leftCol;\n    }\n\n    var DayGridMirrorRenderer = /** @class */ (function (_super) {\n        __extends(DayGridMirrorRenderer, _super);\n        function DayGridMirrorRenderer() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        DayGridMirrorRenderer.prototype.attachSegs = function (segs, mirrorInfo) {\n            var sourceSeg = mirrorInfo.sourceSeg;\n            var rowStructs = this.rowStructs = this.renderSegRows(segs);\n            // inject each new event skeleton into each associated row\n            this.dayGrid.rowEls.forEach(function (rowNode, row) {\n                var skeletonEl = core.htmlToElement('<div class=\"fc-mirror-skeleton\"><table></table></div>'); // will be absolutely positioned\n                var skeletonTopEl;\n                var skeletonTop;\n                // If there is an original segment, match the top position. Otherwise, put it at the row's top level\n                if (sourceSeg && sourceSeg.row === row) {\n                    skeletonTopEl = sourceSeg.el;\n                }\n                else {\n                    skeletonTopEl = rowNode.querySelector('.fc-content-skeleton tbody');\n                    if (!skeletonTopEl) { // when no events\n                        skeletonTopEl = rowNode.querySelector('.fc-content-skeleton table');\n                    }\n                }\n                skeletonTop = skeletonTopEl.getBoundingClientRect().top -\n                    rowNode.getBoundingClientRect().top; // the offsetParent origin\n                skeletonEl.style.top = skeletonTop + 'px';\n                skeletonEl.querySelector('table').appendChild(rowStructs[row].tbodyEl);\n                rowNode.appendChild(skeletonEl);\n            });\n        };\n        return DayGridMirrorRenderer;\n    }(DayGridEventRenderer));\n\n    var EMPTY_CELL_HTML = '<td style=\"pointer-events:none\"></td>';\n    var DayGridFillRenderer = /** @class */ (function (_super) {\n        __extends(DayGridFillRenderer, _super);\n        function DayGridFillRenderer(dayGrid) {\n            var _this = _super.call(this) || this;\n            _this.fillSegTag = 'td'; // override the default tag name\n            _this.dayGrid = dayGrid;\n            return _this;\n        }\n        DayGridFillRenderer.prototype.renderSegs = function (type, context, segs) {\n            // don't render timed background events\n            if (type === 'bgEvent') {\n                segs = segs.filter(function (seg) {\n                    return seg.eventRange.def.allDay;\n                });\n            }\n            _super.prototype.renderSegs.call(this, type, context, segs);\n        };\n        DayGridFillRenderer.prototype.attachSegs = function (type, segs) {\n            var els = [];\n            var i;\n            var seg;\n            var skeletonEl;\n            for (i = 0; i < segs.length; i++) {\n                seg = segs[i];\n                skeletonEl = this.renderFillRow(type, seg);\n                this.dayGrid.rowEls[seg.row].appendChild(skeletonEl);\n                els.push(skeletonEl);\n            }\n            return els;\n        };\n        // Generates the HTML needed for one row of a fill. Requires the seg's el to be rendered.\n        DayGridFillRenderer.prototype.renderFillRow = function (type, seg) {\n            var dayGrid = this.dayGrid;\n            var isRtl = this.context.isRtl;\n            var colCnt = dayGrid.colCnt;\n            var leftCol = isRtl ? (colCnt - 1 - seg.lastCol) : seg.firstCol;\n            var rightCol = isRtl ? (colCnt - 1 - seg.firstCol) : seg.lastCol;\n            var startCol = leftCol;\n            var endCol = rightCol + 1;\n            var className;\n            var skeletonEl;\n            var trEl;\n            if (type === 'businessHours') {\n                className = 'bgevent';\n            }\n            else {\n                className = type.toLowerCase();\n            }\n            skeletonEl = core.htmlToElement('<div class=\"fc-' + className + '-skeleton\">' +\n                '<table><tr></tr></table>' +\n                '</div>');\n            trEl = skeletonEl.getElementsByTagName('tr')[0];\n            if (startCol > 0) {\n                core.appendToElement(trEl, \n                // will create (startCol + 1) td's\n                new Array(startCol + 1).join(EMPTY_CELL_HTML));\n            }\n            seg.el.colSpan = endCol - startCol;\n            trEl.appendChild(seg.el);\n            if (endCol < colCnt) {\n                core.appendToElement(trEl, \n                // will create (colCnt - endCol) td's\n                new Array(colCnt - endCol + 1).join(EMPTY_CELL_HTML));\n            }\n            var introHtml = dayGrid.renderProps.renderIntroHtml();\n            if (introHtml) {\n                if (isRtl) {\n                    core.appendToElement(trEl, introHtml);\n                }\n                else {\n                    core.prependToElement(trEl, introHtml);\n                }\n            }\n            return skeletonEl;\n        };\n        return DayGridFillRenderer;\n    }(core.FillRenderer));\n\n    var DayTile = /** @class */ (function (_super) {\n        __extends(DayTile, _super);\n        function DayTile(el) {\n            var _this = _super.call(this, el) || this;\n            var eventRenderer = _this.eventRenderer = new DayTileEventRenderer(_this);\n            var renderFrame = _this.renderFrame = core.memoizeRendering(_this._renderFrame);\n            _this.renderFgEvents = core.memoizeRendering(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer), [renderFrame]);\n            _this.renderEventSelection = core.memoizeRendering(eventRenderer.selectByInstanceId.bind(eventRenderer), eventRenderer.unselectByInstanceId.bind(eventRenderer), [_this.renderFgEvents]);\n            _this.renderEventDrag = core.memoizeRendering(eventRenderer.hideByHash.bind(eventRenderer), eventRenderer.showByHash.bind(eventRenderer), [renderFrame]);\n            _this.renderEventResize = core.memoizeRendering(eventRenderer.hideByHash.bind(eventRenderer), eventRenderer.showByHash.bind(eventRenderer), [renderFrame]);\n            return _this;\n        }\n        DayTile.prototype.firstContext = function (context) {\n            context.calendar.registerInteractiveComponent(this, {\n                el: this.el,\n                useEventCenter: false\n            });\n        };\n        DayTile.prototype.render = function (props, context) {\n            this.renderFrame(props.date);\n            this.renderFgEvents(context, props.fgSegs);\n            this.renderEventSelection(props.eventSelection);\n            this.renderEventDrag(props.eventDragInstances);\n            this.renderEventResize(props.eventResizeInstances);\n        };\n        DayTile.prototype.destroy = function () {\n            _super.prototype.destroy.call(this);\n            this.renderFrame.unrender(); // should unrender everything else\n            this.context.calendar.unregisterInteractiveComponent(this);\n        };\n        DayTile.prototype._renderFrame = function (date) {\n            var _a = this.context, theme = _a.theme, dateEnv = _a.dateEnv, options = _a.options;\n            var title = dateEnv.format(date, core.createFormatter(options.dayPopoverFormat) // TODO: cache\n            );\n            this.el.innerHTML =\n                '<div class=\"fc-header ' + theme.getClass('popoverHeader') + '\">' +\n                    '<span class=\"fc-title\">' +\n                    core.htmlEscape(title) +\n                    '</span>' +\n                    '<span class=\"fc-close ' + theme.getIconClass('close') + '\"></span>' +\n                    '</div>' +\n                    '<div class=\"fc-body ' + theme.getClass('popoverContent') + '\">' +\n                    '<div class=\"fc-event-container\"></div>' +\n                    '</div>';\n            this.segContainerEl = this.el.querySelector('.fc-event-container');\n        };\n        DayTile.prototype.queryHit = function (positionLeft, positionTop, elWidth, elHeight) {\n            var date = this.props.date; // HACK\n            if (positionLeft < elWidth && positionTop < elHeight) {\n                return {\n                    component: this,\n                    dateSpan: {\n                        allDay: true,\n                        range: { start: date, end: core.addDays(date, 1) }\n                    },\n                    dayEl: this.el,\n                    rect: {\n                        left: 0,\n                        top: 0,\n                        right: elWidth,\n                        bottom: elHeight\n                    },\n                    layer: 1\n                };\n            }\n        };\n        return DayTile;\n    }(core.DateComponent));\n    var DayTileEventRenderer = /** @class */ (function (_super) {\n        __extends(DayTileEventRenderer, _super);\n        function DayTileEventRenderer(dayTile) {\n            var _this = _super.call(this) || this;\n            _this.dayTile = dayTile;\n            return _this;\n        }\n        DayTileEventRenderer.prototype.attachSegs = function (segs) {\n            for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n                var seg = segs_1[_i];\n                this.dayTile.segContainerEl.appendChild(seg.el);\n            }\n        };\n        DayTileEventRenderer.prototype.detachSegs = function (segs) {\n            for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {\n                var seg = segs_2[_i];\n                core.removeElement(seg.el);\n            }\n        };\n        return DayTileEventRenderer;\n    }(SimpleDayGridEventRenderer));\n\n    var DayBgRow = /** @class */ (function () {\n        function DayBgRow(context) {\n            this.context = context;\n        }\n        DayBgRow.prototype.renderHtml = function (props) {\n            var parts = [];\n            if (props.renderIntroHtml) {\n                parts.push(props.renderIntroHtml());\n            }\n            for (var _i = 0, _a = props.cells; _i < _a.length; _i++) {\n                var cell = _a[_i];\n                parts.push(renderCellHtml(cell.date, props.dateProfile, this.context, cell.htmlAttrs));\n            }\n            if (!props.cells.length) {\n                parts.push('<td class=\"fc-day ' + this.context.theme.getClass('widgetContent') + '\"></td>');\n            }\n            if (this.context.options.dir === 'rtl') {\n                parts.reverse();\n            }\n            return '<tr>' + parts.join('') + '</tr>';\n        };\n        return DayBgRow;\n    }());\n    function renderCellHtml(date, dateProfile, context, otherAttrs) {\n        var dateEnv = context.dateEnv, theme = context.theme;\n        var isDateValid = core.rangeContainsMarker(dateProfile.activeRange, date); // TODO: called too frequently. cache somehow.\n        var classes = core.getDayClasses(date, dateProfile, context);\n        classes.unshift('fc-day', theme.getClass('widgetContent'));\n        return '<td class=\"' + classes.join(' ') + '\"' +\n            (isDateValid ?\n                ' data-date=\"' + dateEnv.formatIso(date, { omitTime: true }) + '\"' :\n                '') +\n            (otherAttrs ?\n                ' ' + otherAttrs :\n                '') +\n            '></td>';\n    }\n\n    var DAY_NUM_FORMAT = core.createFormatter({ day: 'numeric' });\n    var WEEK_NUM_FORMAT = core.createFormatter({ week: 'numeric' });\n    var DayGrid = /** @class */ (function (_super) {\n        __extends(DayGrid, _super);\n        function DayGrid(el, renderProps) {\n            var _this = _super.call(this, el) || this;\n            _this.bottomCoordPadding = 0; // hack for extending the hit area for the last row of the coordinate grid\n            _this.isCellSizesDirty = false;\n            _this.renderProps = renderProps;\n            var eventRenderer = _this.eventRenderer = new DayGridEventRenderer(_this);\n            var fillRenderer = _this.fillRenderer = new DayGridFillRenderer(_this);\n            _this.mirrorRenderer = new DayGridMirrorRenderer(_this);\n            var renderCells = _this.renderCells = core.memoizeRendering(_this._renderCells, _this._unrenderCells);\n            _this.renderBusinessHours = core.memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'businessHours'), fillRenderer.unrender.bind(fillRenderer, 'businessHours'), [renderCells]);\n            _this.renderDateSelection = core.memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'highlight'), fillRenderer.unrender.bind(fillRenderer, 'highlight'), [renderCells]);\n            _this.renderBgEvents = core.memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'bgEvent'), fillRenderer.unrender.bind(fillRenderer, 'bgEvent'), [renderCells]);\n            _this.renderFgEvents = core.memoizeRendering(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer), [renderCells]);\n            _this.renderEventSelection = core.memoizeRendering(eventRenderer.selectByInstanceId.bind(eventRenderer), eventRenderer.unselectByInstanceId.bind(eventRenderer), [_this.renderFgEvents]);\n            _this.renderEventDrag = core.memoizeRendering(_this._renderEventDrag, _this._unrenderEventDrag, [renderCells]);\n            _this.renderEventResize = core.memoizeRendering(_this._renderEventResize, _this._unrenderEventResize, [renderCells]);\n            return _this;\n        }\n        DayGrid.prototype.render = function (props, context) {\n            var cells = props.cells;\n            this.rowCnt = cells.length;\n            this.colCnt = cells[0].length;\n            this.renderCells(cells, props.isRigid);\n            this.renderBusinessHours(context, props.businessHourSegs);\n            this.renderDateSelection(context, props.dateSelectionSegs);\n            this.renderBgEvents(context, props.bgEventSegs);\n            this.renderFgEvents(context, props.fgEventSegs);\n            this.renderEventSelection(props.eventSelection);\n            this.renderEventDrag(props.eventDrag);\n            this.renderEventResize(props.eventResize);\n            if (this.segPopoverTile) {\n                this.updateSegPopoverTile();\n            }\n        };\n        DayGrid.prototype.destroy = function () {\n            _super.prototype.destroy.call(this);\n            this.renderCells.unrender(); // will unrender everything else\n        };\n        DayGrid.prototype.getCellRange = function (row, col) {\n            var start = this.props.cells[row][col].date;\n            var end = core.addDays(start, 1);\n            return { start: start, end: end };\n        };\n        DayGrid.prototype.updateSegPopoverTile = function (date, segs) {\n            var ownProps = this.props;\n            this.segPopoverTile.receiveProps({\n                date: date || this.segPopoverTile.props.date,\n                fgSegs: segs || this.segPopoverTile.props.fgSegs,\n                eventSelection: ownProps.eventSelection,\n                eventDragInstances: ownProps.eventDrag ? ownProps.eventDrag.affectedInstances : null,\n                eventResizeInstances: ownProps.eventResize ? ownProps.eventResize.affectedInstances : null\n            }, this.context);\n        };\n        /* Date Rendering\n        ------------------------------------------------------------------------------------------------------------------*/\n        DayGrid.prototype._renderCells = function (cells, isRigid) {\n            var _a = this.context, calendar = _a.calendar, view = _a.view, isRtl = _a.isRtl, dateEnv = _a.dateEnv;\n            var _b = this, rowCnt = _b.rowCnt, colCnt = _b.colCnt;\n            var html = '';\n            var row;\n            var col;\n            for (row = 0; row < rowCnt; row++) {\n                html += this.renderDayRowHtml(row, isRigid);\n            }\n            this.el.innerHTML = html;\n            this.rowEls = core.findElements(this.el, '.fc-row');\n            this.cellEls = core.findElements(this.el, '.fc-day, .fc-disabled-day');\n            if (isRtl) {\n                this.cellEls.reverse();\n            }\n            this.rowPositions = new core.PositionCache(this.el, this.rowEls, false, true // vertical\n            );\n            this.colPositions = new core.PositionCache(this.el, this.cellEls.slice(0, colCnt), // only the first row\n            true, false // horizontal\n            );\n            // trigger dayRender with each cell's element\n            for (row = 0; row < rowCnt; row++) {\n                for (col = 0; col < colCnt; col++) {\n                    calendar.publiclyTrigger('dayRender', [\n                        {\n                            date: dateEnv.toDate(cells[row][col].date),\n                            el: this.getCellEl(row, col),\n                            view: view\n                        }\n                    ]);\n                }\n            }\n            this.isCellSizesDirty = true;\n        };\n        DayGrid.prototype._unrenderCells = function () {\n            this.removeSegPopover();\n        };\n        // Generates the HTML for a single row, which is a div that wraps a table.\n        // `row` is the row number.\n        DayGrid.prototype.renderDayRowHtml = function (row, isRigid) {\n            var theme = this.context.theme;\n            var classes = ['fc-row', 'fc-week', theme.getClass('dayRow')];\n            if (isRigid) {\n                classes.push('fc-rigid');\n            }\n            var bgRow = new DayBgRow(this.context);\n            return '' +\n                '<div class=\"' + classes.join(' ') + '\">' +\n                '<div class=\"fc-bg\">' +\n                '<table class=\"' + theme.getClass('tableGrid') + '\">' +\n                bgRow.renderHtml({\n                    cells: this.props.cells[row],\n                    dateProfile: this.props.dateProfile,\n                    renderIntroHtml: this.renderProps.renderBgIntroHtml\n                }) +\n                '</table>' +\n                '</div>' +\n                '<div class=\"fc-content-skeleton\">' +\n                '<table>' +\n                (this.getIsNumbersVisible() ?\n                    '<thead>' +\n                        this.renderNumberTrHtml(row) +\n                        '</thead>' :\n                    '') +\n                '</table>' +\n                '</div>' +\n                '</div>';\n        };\n        DayGrid.prototype.getIsNumbersVisible = function () {\n            return this.getIsDayNumbersVisible() ||\n                this.renderProps.cellWeekNumbersVisible ||\n                this.renderProps.colWeekNumbersVisible;\n        };\n        DayGrid.prototype.getIsDayNumbersVisible = function () {\n            return this.rowCnt > 1;\n        };\n        /* Grid Number Rendering\n        ------------------------------------------------------------------------------------------------------------------*/\n        DayGrid.prototype.renderNumberTrHtml = function (row) {\n            var isRtl = this.context.isRtl;\n            var intro = this.renderProps.renderNumberIntroHtml(row, this);\n            return '' +\n                '<tr>' +\n                (isRtl ? '' : intro) +\n                this.renderNumberCellsHtml(row) +\n                (isRtl ? intro : '') +\n                '</tr>';\n        };\n        DayGrid.prototype.renderNumberCellsHtml = function (row) {\n            var htmls = [];\n            var col;\n            var date;\n            for (col = 0; col < this.colCnt; col++) {\n                date = this.props.cells[row][col].date;\n                htmls.push(this.renderNumberCellHtml(date));\n            }\n            if (this.context.isRtl) {\n                htmls.reverse();\n            }\n            return htmls.join('');\n        };\n        // Generates the HTML for the <td>s of the \"number\" row in the DayGrid's content skeleton.\n        // The number row will only exist if either day numbers or week numbers are turned on.\n        DayGrid.prototype.renderNumberCellHtml = function (date) {\n            var _a = this.context, dateEnv = _a.dateEnv, options = _a.options;\n            var html = '';\n            var isDateValid = core.rangeContainsMarker(this.props.dateProfile.activeRange, date); // TODO: called too frequently. cache somehow.\n            var isDayNumberVisible = this.getIsDayNumbersVisible() && isDateValid;\n            var classes;\n            var weekCalcFirstDow;\n            if (!isDayNumberVisible && !this.renderProps.cellWeekNumbersVisible) {\n                // no numbers in day cell (week number must be along the side)\n                return '<td></td>'; //  will create an empty space above events :(\n            }\n            classes = core.getDayClasses(date, this.props.dateProfile, this.context);\n            classes.unshift('fc-day-top');\n            if (this.renderProps.cellWeekNumbersVisible) {\n                weekCalcFirstDow = dateEnv.weekDow;\n            }\n            html += '<td class=\"' + classes.join(' ') + '\"' +\n                (isDateValid ?\n                    ' data-date=\"' + dateEnv.formatIso(date, { omitTime: true }) + '\"' :\n                    '') +\n                '>';\n            if (this.renderProps.cellWeekNumbersVisible && (date.getUTCDay() === weekCalcFirstDow)) {\n                html += core.buildGotoAnchorHtml(options, dateEnv, { date: date, type: 'week' }, { 'class': 'fc-week-number' }, dateEnv.format(date, WEEK_NUM_FORMAT) // inner HTML\n                );\n            }\n            if (isDayNumberVisible) {\n                html += core.buildGotoAnchorHtml(options, dateEnv, date, { 'class': 'fc-day-number' }, dateEnv.format(date, DAY_NUM_FORMAT) // inner HTML\n                );\n            }\n            html += '</td>';\n            return html;\n        };\n        /* Sizing\n        ------------------------------------------------------------------------------------------------------------------*/\n        DayGrid.prototype.updateSize = function (isResize) {\n            var calendar = this.context.calendar;\n            var _a = this, fillRenderer = _a.fillRenderer, eventRenderer = _a.eventRenderer, mirrorRenderer = _a.mirrorRenderer;\n            if (isResize ||\n                this.isCellSizesDirty ||\n                calendar.isEventsUpdated // hack\n            ) {\n                this.buildPositionCaches();\n                this.isCellSizesDirty = false;\n            }\n            fillRenderer.computeSizes(isResize);\n            eventRenderer.computeSizes(isResize);\n            mirrorRenderer.computeSizes(isResize);\n            fillRenderer.assignSizes(isResize);\n            eventRenderer.assignSizes(isResize);\n            mirrorRenderer.assignSizes(isResize);\n        };\n        DayGrid.prototype.buildPositionCaches = function () {\n            this.buildColPositions();\n            this.buildRowPositions();\n        };\n        DayGrid.prototype.buildColPositions = function () {\n            this.colPositions.build();\n        };\n        DayGrid.prototype.buildRowPositions = function () {\n            this.rowPositions.build();\n            this.rowPositions.bottoms[this.rowCnt - 1] += this.bottomCoordPadding; // hack\n        };\n        /* Hit System\n        ------------------------------------------------------------------------------------------------------------------*/\n        DayGrid.prototype.positionToHit = function (leftPosition, topPosition) {\n            var _a = this, colPositions = _a.colPositions, rowPositions = _a.rowPositions;\n            var col = colPositions.leftToIndex(leftPosition);\n            var row = rowPositions.topToIndex(topPosition);\n            if (row != null && col != null) {\n                return {\n                    row: row,\n                    col: col,\n                    dateSpan: {\n                        range: this.getCellRange(row, col),\n                        allDay: true\n                    },\n                    dayEl: this.getCellEl(row, col),\n                    relativeRect: {\n                        left: colPositions.lefts[col],\n                        right: colPositions.rights[col],\n                        top: rowPositions.tops[row],\n                        bottom: rowPositions.bottoms[row]\n                    }\n                };\n            }\n        };\n        /* Cell System\n        ------------------------------------------------------------------------------------------------------------------*/\n        // FYI: the first column is the leftmost column, regardless of date\n        DayGrid.prototype.getCellEl = function (row, col) {\n            return this.cellEls[row * this.colCnt + col];\n        };\n        /* Event Drag Visualization\n        ------------------------------------------------------------------------------------------------------------------*/\n        DayGrid.prototype._renderEventDrag = function (state) {\n            if (state) {\n                this.eventRenderer.hideByHash(state.affectedInstances);\n                this.fillRenderer.renderSegs('highlight', this.context, state.segs);\n            }\n        };\n        DayGrid.prototype._unrenderEventDrag = function (state) {\n            if (state) {\n                this.eventRenderer.showByHash(state.affectedInstances);\n                this.fillRenderer.unrender('highlight', this.context);\n            }\n        };\n        /* Event Resize Visualization\n        ------------------------------------------------------------------------------------------------------------------*/\n        DayGrid.prototype._renderEventResize = function (state) {\n            if (state) {\n                this.eventRenderer.hideByHash(state.affectedInstances);\n                this.fillRenderer.renderSegs('highlight', this.context, state.segs);\n                this.mirrorRenderer.renderSegs(this.context, state.segs, { isResizing: true, sourceSeg: state.sourceSeg });\n            }\n        };\n        DayGrid.prototype._unrenderEventResize = function (state) {\n            if (state) {\n                this.eventRenderer.showByHash(state.affectedInstances);\n                this.fillRenderer.unrender('highlight', this.context);\n                this.mirrorRenderer.unrender(this.context, state.segs, { isResizing: true, sourceSeg: state.sourceSeg });\n            }\n        };\n        /* More+ Link Popover\n        ------------------------------------------------------------------------------------------------------------------*/\n        DayGrid.prototype.removeSegPopover = function () {\n            if (this.segPopover) {\n                this.segPopover.hide(); // in handler, will call segPopover's removeElement\n            }\n        };\n        // Limits the number of \"levels\" (vertically stacking layers of events) for each row of the grid.\n        // `levelLimit` can be false (don't limit), a number, or true (should be computed).\n        DayGrid.prototype.limitRows = function (levelLimit) {\n            var rowStructs = this.eventRenderer.rowStructs || [];\n            var row; // row #\n            var rowLevelLimit;\n            for (row = 0; row < rowStructs.length; row++) {\n                this.unlimitRow(row);\n                if (!levelLimit) {\n                    rowLevelLimit = false;\n                }\n                else if (typeof levelLimit === 'number') {\n                    rowLevelLimit = levelLimit;\n                }\n                else {\n                    rowLevelLimit = this.computeRowLevelLimit(row);\n                }\n                if (rowLevelLimit !== false) {\n                    this.limitRow(row, rowLevelLimit);\n                }\n            }\n        };\n        // Computes the number of levels a row will accomodate without going outside its bounds.\n        // Assumes the row is \"rigid\" (maintains a constant height regardless of what is inside).\n        // `row` is the row number.\n        DayGrid.prototype.computeRowLevelLimit = function (row) {\n            var rowEl = this.rowEls[row]; // the containing \"fake\" row div\n            var rowBottom = rowEl.getBoundingClientRect().bottom; // relative to viewport!\n            var trEls = core.findChildren(this.eventRenderer.rowStructs[row].tbodyEl);\n            var i;\n            var trEl;\n            // Reveal one level <tr> at a time and stop when we find one out of bounds\n            for (i = 0; i < trEls.length; i++) {\n                trEl = trEls[i];\n                trEl.classList.remove('fc-limited'); // reset to original state (reveal)\n                if (trEl.getBoundingClientRect().bottom > rowBottom) {\n                    return i;\n                }\n            }\n            return false; // should not limit at all\n        };\n        // Limits the given grid row to the maximum number of levels and injects \"more\" links if necessary.\n        // `row` is the row number.\n        // `levelLimit` is a number for the maximum (inclusive) number of levels allowed.\n        DayGrid.prototype.limitRow = function (row, levelLimit) {\n            var _this = this;\n            var colCnt = this.colCnt;\n            var isRtl = this.context.isRtl;\n            var rowStruct = this.eventRenderer.rowStructs[row];\n            var moreNodes = []; // array of \"more\" <a> links and <td> DOM nodes\n            var col = 0; // col #, left-to-right (not chronologically)\n            var levelSegs; // array of segment objects in the last allowable level, ordered left-to-right\n            var cellMatrix; // a matrix (by level, then column) of all <td> elements in the row\n            var limitedNodes; // array of temporarily hidden level <tr> and segment <td> DOM nodes\n            var i;\n            var seg;\n            var segsBelow; // array of segment objects below `seg` in the current `col`\n            var totalSegsBelow; // total number of segments below `seg` in any of the columns `seg` occupies\n            var colSegsBelow; // array of segment arrays, below seg, one for each column (offset from segs's first column)\n            var td;\n            var rowSpan;\n            var segMoreNodes; // array of \"more\" <td> cells that will stand-in for the current seg's cell\n            var j;\n            var moreTd;\n            var moreWrap;\n            var moreLink;\n            // Iterates through empty level cells and places \"more\" links inside if need be\n            var emptyCellsUntil = function (endCol) {\n                while (col < endCol) {\n                    segsBelow = _this.getCellSegs(row, col, levelLimit);\n                    if (segsBelow.length) {\n                        td = cellMatrix[levelLimit - 1][col];\n                        moreLink = _this.renderMoreLink(row, col, segsBelow);\n                        moreWrap = core.createElement('div', null, moreLink);\n                        td.appendChild(moreWrap);\n                        moreNodes.push(moreWrap);\n                    }\n                    col++;\n                }\n            };\n            if (levelLimit && levelLimit < rowStruct.segLevels.length) { // is it actually over the limit?\n                levelSegs = rowStruct.segLevels[levelLimit - 1];\n                cellMatrix = rowStruct.cellMatrix;\n                limitedNodes = core.findChildren(rowStruct.tbodyEl).slice(levelLimit); // get level <tr> elements past the limit\n                limitedNodes.forEach(function (node) {\n                    node.classList.add('fc-limited'); // hide elements and get a simple DOM-nodes array\n                });\n                // iterate though segments in the last allowable level\n                for (i = 0; i < levelSegs.length; i++) {\n                    seg = levelSegs[i];\n                    var leftCol = isRtl ? (colCnt - 1 - seg.lastCol) : seg.firstCol;\n                    var rightCol = isRtl ? (colCnt - 1 - seg.firstCol) : seg.lastCol;\n                    emptyCellsUntil(leftCol); // process empty cells before the segment\n                    // determine *all* segments below `seg` that occupy the same columns\n                    colSegsBelow = [];\n                    totalSegsBelow = 0;\n                    while (col <= rightCol) {\n                        segsBelow = this.getCellSegs(row, col, levelLimit);\n                        colSegsBelow.push(segsBelow);\n                        totalSegsBelow += segsBelow.length;\n                        col++;\n                    }\n                    if (totalSegsBelow) { // do we need to replace this segment with one or many \"more\" links?\n                        td = cellMatrix[levelLimit - 1][leftCol]; // the segment's parent cell\n                        rowSpan = td.rowSpan || 1;\n                        segMoreNodes = [];\n                        // make a replacement <td> for each column the segment occupies. will be one for each colspan\n                        for (j = 0; j < colSegsBelow.length; j++) {\n                            moreTd = core.createElement('td', { className: 'fc-more-cell', rowSpan: rowSpan });\n                            segsBelow = colSegsBelow[j];\n                            moreLink = this.renderMoreLink(row, leftCol + j, [seg].concat(segsBelow) // count seg as hidden too\n                            );\n                            moreWrap = core.createElement('div', null, moreLink);\n                            moreTd.appendChild(moreWrap);\n                            segMoreNodes.push(moreTd);\n                            moreNodes.push(moreTd);\n                        }\n                        td.classList.add('fc-limited');\n                        core.insertAfterElement(td, segMoreNodes);\n                        limitedNodes.push(td);\n                    }\n                }\n                emptyCellsUntil(this.colCnt); // finish off the level\n                rowStruct.moreEls = moreNodes; // for easy undoing later\n                rowStruct.limitedEls = limitedNodes; // for easy undoing later\n            }\n        };\n        // Reveals all levels and removes all \"more\"-related elements for a grid's row.\n        // `row` is a row number.\n        DayGrid.prototype.unlimitRow = function (row) {\n            var rowStruct = this.eventRenderer.rowStructs[row];\n            if (rowStruct.moreEls) {\n                rowStruct.moreEls.forEach(core.removeElement);\n                rowStruct.moreEls = null;\n            }\n            if (rowStruct.limitedEls) {\n                rowStruct.limitedEls.forEach(function (limitedEl) {\n                    limitedEl.classList.remove('fc-limited');\n                });\n                rowStruct.limitedEls = null;\n            }\n        };\n        // Renders an <a> element that represents hidden event element for a cell.\n        // Responsible for attaching click handler as well.\n        DayGrid.prototype.renderMoreLink = function (row, col, hiddenSegs) {\n            var _this = this;\n            var _a = this.context, calendar = _a.calendar, view = _a.view, dateEnv = _a.dateEnv, options = _a.options, isRtl = _a.isRtl;\n            var a = core.createElement('a', { className: 'fc-more' });\n            a.innerText = this.getMoreLinkText(hiddenSegs.length);\n            a.addEventListener('click', function (ev) {\n                var clickOption = options.eventLimitClick;\n                var _col = isRtl ? _this.colCnt - col - 1 : col; // HACK: props.cells has different dir system?\n                var date = _this.props.cells[row][_col].date;\n                var moreEl = ev.currentTarget;\n                var dayEl = _this.getCellEl(row, col);\n                var allSegs = _this.getCellSegs(row, col);\n                // rescope the segments to be within the cell's date\n                var reslicedAllSegs = _this.resliceDaySegs(allSegs, date);\n                var reslicedHiddenSegs = _this.resliceDaySegs(hiddenSegs, date);\n                if (typeof clickOption === 'function') {\n                    // the returned value can be an atomic option\n                    clickOption = calendar.publiclyTrigger('eventLimitClick', [\n                        {\n                            date: dateEnv.toDate(date),\n                            allDay: true,\n                            dayEl: dayEl,\n                            moreEl: moreEl,\n                            segs: reslicedAllSegs,\n                            hiddenSegs: reslicedHiddenSegs,\n                            jsEvent: ev,\n                            view: view\n                        }\n                    ]);\n                }\n                if (clickOption === 'popover') {\n                    _this.showSegPopover(row, col, moreEl, reslicedAllSegs);\n                }\n                else if (typeof clickOption === 'string') { // a view name\n                    calendar.zoomTo(date, clickOption);\n                }\n            });\n            return a;\n        };\n        // Reveals the popover that displays all events within a cell\n        DayGrid.prototype.showSegPopover = function (row, col, moreLink, segs) {\n            var _this = this;\n            var _a = this.context, calendar = _a.calendar, view = _a.view, theme = _a.theme, isRtl = _a.isRtl;\n            var _col = isRtl ? this.colCnt - col - 1 : col; // HACK: props.cells has different dir system?\n            var moreWrap = moreLink.parentNode; // the <div> wrapper around the <a>\n            var topEl; // the element we want to match the top coordinate of\n            var options;\n            if (this.rowCnt === 1) {\n                topEl = view.el; // will cause the popover to cover any sort of header\n            }\n            else {\n                topEl = this.rowEls[row]; // will align with top of row\n            }\n            options = {\n                className: 'fc-more-popover ' + theme.getClass('popover'),\n                parentEl: view.el,\n                top: core.computeRect(topEl).top,\n                autoHide: true,\n                content: function (el) {\n                    _this.segPopoverTile = new DayTile(el);\n                    _this.updateSegPopoverTile(_this.props.cells[row][_col].date, segs);\n                },\n                hide: function () {\n                    _this.segPopoverTile.destroy();\n                    _this.segPopoverTile = null;\n                    _this.segPopover.destroy();\n                    _this.segPopover = null;\n                }\n            };\n            // Determine horizontal coordinate.\n            // We use the moreWrap instead of the <td> to avoid border confusion.\n            if (isRtl) {\n                options.right = core.computeRect(moreWrap).right + 1; // +1 to be over cell border\n            }\n            else {\n                options.left = core.computeRect(moreWrap).left - 1; // -1 to be over cell border\n            }\n            this.segPopover = new Popover(options);\n            this.segPopover.show();\n            calendar.releaseAfterSizingTriggers(); // hack for eventPositioned\n        };\n        // Given the events within an array of segment objects, reslice them to be in a single day\n        DayGrid.prototype.resliceDaySegs = function (segs, dayDate) {\n            var dayStart = dayDate;\n            var dayEnd = core.addDays(dayStart, 1);\n            var dayRange = { start: dayStart, end: dayEnd };\n            var newSegs = [];\n            for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n                var seg = segs_1[_i];\n                var eventRange = seg.eventRange;\n                var origRange = eventRange.range;\n                var slicedRange = core.intersectRanges(origRange, dayRange);\n                if (slicedRange) {\n                    newSegs.push(__assign({}, seg, { eventRange: {\n                            def: eventRange.def,\n                            ui: __assign({}, eventRange.ui, { durationEditable: false }),\n                            instance: eventRange.instance,\n                            range: slicedRange\n                        }, isStart: seg.isStart && slicedRange.start.valueOf() === origRange.start.valueOf(), isEnd: seg.isEnd && slicedRange.end.valueOf() === origRange.end.valueOf() }));\n                }\n            }\n            return newSegs;\n        };\n        // Generates the text that should be inside a \"more\" link, given the number of events it represents\n        DayGrid.prototype.getMoreLinkText = function (num) {\n            var opt = this.context.options.eventLimitText;\n            if (typeof opt === 'function') {\n                return opt(num);\n            }\n            else {\n                return '+' + num + ' ' + opt;\n            }\n        };\n        // Returns segments within a given cell.\n        // If `startLevel` is specified, returns only events including and below that level. Otherwise returns all segs.\n        DayGrid.prototype.getCellSegs = function (row, col, startLevel) {\n            var segMatrix = this.eventRenderer.rowStructs[row].segMatrix;\n            var level = startLevel || 0;\n            var segs = [];\n            var seg;\n            while (level < segMatrix.length) {\n                seg = segMatrix[level][col];\n                if (seg) {\n                    segs.push(seg);\n                }\n                level++;\n            }\n            return segs;\n        };\n        return DayGrid;\n    }(core.DateComponent));\n\n    var WEEK_NUM_FORMAT$1 = core.createFormatter({ week: 'numeric' });\n    /* An abstract class for the daygrid views, as well as month view. Renders one or more rows of day cells.\n    ----------------------------------------------------------------------------------------------------------------------*/\n    // It is a manager for a DayGrid subcomponent, which does most of the heavy lifting.\n    // It is responsible for managing width/height.\n    var AbstractDayGridView = /** @class */ (function (_super) {\n        __extends(AbstractDayGridView, _super);\n        function AbstractDayGridView() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.processOptions = core.memoize(_this._processOptions);\n            _this.renderSkeleton = core.memoizeRendering(_this._renderSkeleton, _this._unrenderSkeleton);\n            /* Header Rendering\n            ------------------------------------------------------------------------------------------------------------------*/\n            // Generates the HTML that will go before the day-of week header cells\n            _this.renderHeadIntroHtml = function () {\n                var _a = _this.context, theme = _a.theme, options = _a.options;\n                if (_this.colWeekNumbersVisible) {\n                    return '' +\n                        '<th class=\"fc-week-number ' + theme.getClass('widgetHeader') + '\" ' + _this.weekNumberStyleAttr() + '>' +\n                        '<span>' + // needed for matchCellWidths\n                        core.htmlEscape(options.weekLabel) +\n                        '</span>' +\n                        '</th>';\n                }\n                return '';\n            };\n            /* Day Grid Rendering\n            ------------------------------------------------------------------------------------------------------------------*/\n            // Generates the HTML that will go before content-skeleton cells that display the day/week numbers\n            _this.renderDayGridNumberIntroHtml = function (row, dayGrid) {\n                var _a = _this.context, options = _a.options, dateEnv = _a.dateEnv;\n                var weekStart = dayGrid.props.cells[row][0].date;\n                if (_this.colWeekNumbersVisible) {\n                    return '' +\n                        '<td class=\"fc-week-number\" ' + _this.weekNumberStyleAttr() + '>' +\n                        core.buildGotoAnchorHtml(// aside from link, important for matchCellWidths\n                        options, dateEnv, { date: weekStart, type: 'week', forceOff: dayGrid.colCnt === 1 }, dateEnv.format(weekStart, WEEK_NUM_FORMAT$1) // inner HTML\n                        ) +\n                        '</td>';\n                }\n                return '';\n            };\n            // Generates the HTML that goes before the day bg cells for each day-row\n            _this.renderDayGridBgIntroHtml = function () {\n                var theme = _this.context.theme;\n                if (_this.colWeekNumbersVisible) {\n                    return '<td class=\"fc-week-number ' + theme.getClass('widgetContent') + '\" ' + _this.weekNumberStyleAttr() + '></td>';\n                }\n                return '';\n            };\n            // Generates the HTML that goes before every other type of row generated by DayGrid.\n            // Affects mirror-skeleton and highlight-skeleton rows.\n            _this.renderDayGridIntroHtml = function () {\n                if (_this.colWeekNumbersVisible) {\n                    return '<td class=\"fc-week-number\" ' + _this.weekNumberStyleAttr() + '></td>';\n                }\n                return '';\n            };\n            return _this;\n        }\n        AbstractDayGridView.prototype._processOptions = function (options) {\n            if (options.weekNumbers) {\n                if (options.weekNumbersWithinDays) {\n                    this.cellWeekNumbersVisible = true;\n                    this.colWeekNumbersVisible = false;\n                }\n                else {\n                    this.cellWeekNumbersVisible = false;\n                    this.colWeekNumbersVisible = true;\n                }\n            }\n            else {\n                this.colWeekNumbersVisible = false;\n                this.cellWeekNumbersVisible = false;\n            }\n        };\n        AbstractDayGridView.prototype.render = function (props, context) {\n            _super.prototype.render.call(this, props, context);\n            this.processOptions(context.options);\n            this.renderSkeleton(context);\n        };\n        AbstractDayGridView.prototype.destroy = function () {\n            _super.prototype.destroy.call(this);\n            this.renderSkeleton.unrender();\n        };\n        AbstractDayGridView.prototype._renderSkeleton = function (context) {\n            this.el.classList.add('fc-dayGrid-view');\n            this.el.innerHTML = this.renderSkeletonHtml();\n            this.scroller = new core.ScrollComponent('hidden', // overflow x\n            'auto' // overflow y\n            );\n            var dayGridContainerEl = this.scroller.el;\n            this.el.querySelector('.fc-body > tr > td').appendChild(dayGridContainerEl);\n            dayGridContainerEl.classList.add('fc-day-grid-container');\n            var dayGridEl = core.createElement('div', { className: 'fc-day-grid' });\n            dayGridContainerEl.appendChild(dayGridEl);\n            this.dayGrid = new DayGrid(dayGridEl, {\n                renderNumberIntroHtml: this.renderDayGridNumberIntroHtml,\n                renderBgIntroHtml: this.renderDayGridBgIntroHtml,\n                renderIntroHtml: this.renderDayGridIntroHtml,\n                colWeekNumbersVisible: this.colWeekNumbersVisible,\n                cellWeekNumbersVisible: this.cellWeekNumbersVisible\n            });\n        };\n        AbstractDayGridView.prototype._unrenderSkeleton = function () {\n            this.el.classList.remove('fc-dayGrid-view');\n            this.dayGrid.destroy();\n            this.scroller.destroy();\n        };\n        // Builds the HTML skeleton for the view.\n        // The day-grid component will render inside of a container defined by this HTML.\n        AbstractDayGridView.prototype.renderSkeletonHtml = function () {\n            var _a = this.context, theme = _a.theme, options = _a.options;\n            return '' +\n                '<table class=\"' + theme.getClass('tableGrid') + '\">' +\n                (options.columnHeader ?\n                    '<thead class=\"fc-head\">' +\n                        '<tr>' +\n                        '<td class=\"fc-head-container ' + theme.getClass('widgetHeader') + '\">&nbsp;</td>' +\n                        '</tr>' +\n                        '</thead>' :\n                    '') +\n                '<tbody class=\"fc-body\">' +\n                '<tr>' +\n                '<td class=\"' + theme.getClass('widgetContent') + '\"></td>' +\n                '</tr>' +\n                '</tbody>' +\n                '</table>';\n        };\n        // Generates an HTML attribute string for setting the width of the week number column, if it is known\n        AbstractDayGridView.prototype.weekNumberStyleAttr = function () {\n            if (this.weekNumberWidth != null) {\n                return 'style=\"width:' + this.weekNumberWidth + 'px\"';\n            }\n            return '';\n        };\n        // Determines whether each row should have a constant height\n        AbstractDayGridView.prototype.hasRigidRows = function () {\n            var eventLimit = this.context.options.eventLimit;\n            return eventLimit && typeof eventLimit !== 'number';\n        };\n        /* Dimensions\n        ------------------------------------------------------------------------------------------------------------------*/\n        AbstractDayGridView.prototype.updateSize = function (isResize, viewHeight, isAuto) {\n            _super.prototype.updateSize.call(this, isResize, viewHeight, isAuto); // will call updateBaseSize. important that executes first\n            this.dayGrid.updateSize(isResize);\n        };\n        // Refreshes the horizontal dimensions of the view\n        AbstractDayGridView.prototype.updateBaseSize = function (isResize, viewHeight, isAuto) {\n            var dayGrid = this.dayGrid;\n            var eventLimit = this.context.options.eventLimit;\n            var headRowEl = this.header ? this.header.el : null; // HACK\n            var scrollerHeight;\n            var scrollbarWidths;\n            // hack to give the view some height prior to dayGrid's columns being rendered\n            // TODO: separate setting height from scroller VS dayGrid.\n            if (!dayGrid.rowEls) {\n                if (!isAuto) {\n                    scrollerHeight = this.computeScrollerHeight(viewHeight);\n                    this.scroller.setHeight(scrollerHeight);\n                }\n                return;\n            }\n            if (this.colWeekNumbersVisible) {\n                // Make sure all week number cells running down the side have the same width.\n                this.weekNumberWidth = core.matchCellWidths(core.findElements(this.el, '.fc-week-number'));\n            }\n            // reset all heights to be natural\n            this.scroller.clear();\n            if (headRowEl) {\n                core.uncompensateScroll(headRowEl);\n            }\n            dayGrid.removeSegPopover(); // kill the \"more\" popover if displayed\n            // is the event limit a constant level number?\n            if (eventLimit && typeof eventLimit === 'number') {\n                dayGrid.limitRows(eventLimit); // limit the levels first so the height can redistribute after\n            }\n            // distribute the height to the rows\n            // (viewHeight is a \"recommended\" value if isAuto)\n            scrollerHeight = this.computeScrollerHeight(viewHeight);\n            this.setGridHeight(scrollerHeight, isAuto);\n            // is the event limit dynamically calculated?\n            if (eventLimit && typeof eventLimit !== 'number') {\n                dayGrid.limitRows(eventLimit); // limit the levels after the grid's row heights have been set\n            }\n            if (!isAuto) { // should we force dimensions of the scroll container?\n                this.scroller.setHeight(scrollerHeight);\n                scrollbarWidths = this.scroller.getScrollbarWidths();\n                if (scrollbarWidths.left || scrollbarWidths.right) { // using scrollbars?\n                    if (headRowEl) {\n                        core.compensateScroll(headRowEl, scrollbarWidths);\n                    }\n                    // doing the scrollbar compensation might have created text overflow which created more height. redo\n                    scrollerHeight = this.computeScrollerHeight(viewHeight);\n                    this.scroller.setHeight(scrollerHeight);\n                }\n                // guarantees the same scrollbar widths\n                this.scroller.lockOverflow(scrollbarWidths);\n            }\n        };\n        // given a desired total height of the view, returns what the height of the scroller should be\n        AbstractDayGridView.prototype.computeScrollerHeight = function (viewHeight) {\n            return viewHeight -\n                core.subtractInnerElHeight(this.el, this.scroller.el); // everything that's NOT the scroller\n        };\n        // Sets the height of just the DayGrid component in this view\n        AbstractDayGridView.prototype.setGridHeight = function (height, isAuto) {\n            if (this.context.options.monthMode) {\n                // if auto, make the height of each row the height that it would be if there were 6 weeks\n                if (isAuto) {\n                    height *= this.dayGrid.rowCnt / 6;\n                }\n                core.distributeHeight(this.dayGrid.rowEls, height, !isAuto); // if auto, don't compensate for height-hogging rows\n            }\n            else {\n                if (isAuto) {\n                    core.undistributeHeight(this.dayGrid.rowEls); // let the rows be their natural height with no expanding\n                }\n                else {\n                    core.distributeHeight(this.dayGrid.rowEls, height, true); // true = compensate for height-hogging rows\n                }\n            }\n        };\n        /* Scroll\n        ------------------------------------------------------------------------------------------------------------------*/\n        AbstractDayGridView.prototype.computeDateScroll = function (duration) {\n            return { top: 0 };\n        };\n        AbstractDayGridView.prototype.queryDateScroll = function () {\n            return { top: this.scroller.getScrollTop() };\n        };\n        AbstractDayGridView.prototype.applyDateScroll = function (scroll) {\n            if (scroll.top !== undefined) {\n                this.scroller.setScrollTop(scroll.top);\n            }\n        };\n        return AbstractDayGridView;\n    }(core.View));\n    AbstractDayGridView.prototype.dateProfileGeneratorClass = DayGridDateProfileGenerator;\n\n    var SimpleDayGrid = /** @class */ (function (_super) {\n        __extends(SimpleDayGrid, _super);\n        function SimpleDayGrid(dayGrid) {\n            var _this = _super.call(this, dayGrid.el) || this;\n            _this.slicer = new DayGridSlicer();\n            _this.dayGrid = dayGrid;\n            return _this;\n        }\n        SimpleDayGrid.prototype.firstContext = function (context) {\n            context.calendar.registerInteractiveComponent(this, { el: this.dayGrid.el });\n        };\n        SimpleDayGrid.prototype.destroy = function () {\n            _super.prototype.destroy.call(this);\n            this.context.calendar.unregisterInteractiveComponent(this);\n        };\n        SimpleDayGrid.prototype.render = function (props, context) {\n            var dayGrid = this.dayGrid;\n            var dateProfile = props.dateProfile, dayTable = props.dayTable;\n            dayGrid.receiveProps(__assign({}, this.slicer.sliceProps(props, dateProfile, props.nextDayThreshold, context.calendar, dayGrid, dayTable), { dateProfile: dateProfile, cells: dayTable.cells, isRigid: props.isRigid }), context);\n        };\n        SimpleDayGrid.prototype.buildPositionCaches = function () {\n            this.dayGrid.buildPositionCaches();\n        };\n        SimpleDayGrid.prototype.queryHit = function (positionLeft, positionTop) {\n            var rawHit = this.dayGrid.positionToHit(positionLeft, positionTop);\n            if (rawHit) {\n                return {\n                    component: this.dayGrid,\n                    dateSpan: rawHit.dateSpan,\n                    dayEl: rawHit.dayEl,\n                    rect: {\n                        left: rawHit.relativeRect.left,\n                        right: rawHit.relativeRect.right,\n                        top: rawHit.relativeRect.top,\n                        bottom: rawHit.relativeRect.bottom\n                    },\n                    layer: 0\n                };\n            }\n        };\n        return SimpleDayGrid;\n    }(core.DateComponent));\n    var DayGridSlicer = /** @class */ (function (_super) {\n        __extends(DayGridSlicer, _super);\n        function DayGridSlicer() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        DayGridSlicer.prototype.sliceRange = function (dateRange, dayTable) {\n            return dayTable.sliceRange(dateRange);\n        };\n        return DayGridSlicer;\n    }(core.Slicer));\n\n    var DayGridView = /** @class */ (function (_super) {\n        __extends(DayGridView, _super);\n        function DayGridView() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.buildDayTable = core.memoize(buildDayTable);\n            return _this;\n        }\n        DayGridView.prototype.render = function (props, context) {\n            _super.prototype.render.call(this, props, context); // will call _renderSkeleton/_unrenderSkeleton\n            var dateProfile = this.props.dateProfile;\n            var dayTable = this.dayTable =\n                this.buildDayTable(dateProfile, props.dateProfileGenerator);\n            if (this.header) {\n                this.header.receiveProps({\n                    dateProfile: dateProfile,\n                    dates: dayTable.headerDates,\n                    datesRepDistinctDays: dayTable.rowCnt === 1,\n                    renderIntroHtml: this.renderHeadIntroHtml\n                }, context);\n            }\n            this.simpleDayGrid.receiveProps({\n                dateProfile: dateProfile,\n                dayTable: dayTable,\n                businessHours: props.businessHours,\n                dateSelection: props.dateSelection,\n                eventStore: props.eventStore,\n                eventUiBases: props.eventUiBases,\n                eventSelection: props.eventSelection,\n                eventDrag: props.eventDrag,\n                eventResize: props.eventResize,\n                isRigid: this.hasRigidRows(),\n                nextDayThreshold: this.context.nextDayThreshold\n            }, context);\n        };\n        DayGridView.prototype._renderSkeleton = function (context) {\n            _super.prototype._renderSkeleton.call(this, context);\n            if (context.options.columnHeader) {\n                this.header = new core.DayHeader(this.el.querySelector('.fc-head-container'));\n            }\n            this.simpleDayGrid = new SimpleDayGrid(this.dayGrid);\n        };\n        DayGridView.prototype._unrenderSkeleton = function () {\n            _super.prototype._unrenderSkeleton.call(this);\n            if (this.header) {\n                this.header.destroy();\n            }\n            this.simpleDayGrid.destroy();\n        };\n        return DayGridView;\n    }(AbstractDayGridView));\n    function buildDayTable(dateProfile, dateProfileGenerator) {\n        var daySeries = new core.DaySeries(dateProfile.renderRange, dateProfileGenerator);\n        return new core.DayTable(daySeries, /year|month|week/.test(dateProfile.currentRangeUnit));\n    }\n\n    var main = core.createPlugin({\n        defaultView: 'dayGridMonth',\n        views: {\n            dayGrid: DayGridView,\n            dayGridDay: {\n                type: 'dayGrid',\n                duration: { days: 1 }\n            },\n            dayGridWeek: {\n                type: 'dayGrid',\n                duration: { weeks: 1 }\n            },\n            dayGridMonth: {\n                type: 'dayGrid',\n                duration: { months: 1 },\n                monthMode: true,\n                fixedWeekCount: true\n            }\n        }\n    });\n\n    exports.AbstractDayGridView = AbstractDayGridView;\n    exports.DayBgRow = DayBgRow;\n    exports.DayGrid = DayGrid;\n    exports.DayGridSlicer = DayGridSlicer;\n    exports.DayGridView = DayGridView;\n    exports.SimpleDayGrid = SimpleDayGrid;\n    exports.buildBasicDayTable = buildDayTable;\n    exports.default = main;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]},"metadata":{},"sourceType":"module"}