{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Arij\\\\projects\\\\theone\\\\client\\\\src\\\\components\\\\clubPage\\\\coordonnees.component.js\";\nimport React from 'react';\nimport axios from 'axios';\n\nconst MongoClient = require('mongodb').MongoClient;\n\nconst assert = require('assert');\n\nclass Coordonnees extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n\n    this.getDataFromDb = () => {\n      fetch('http://localhost:3001/api/getData').then(data => data.json()).then(res => this.setState({\n        data: res.data\n      }));\n    };\n\n    this.putDataToDB = message => {\n      let currentIds = this.state.data.map(data => data.id);\n      let idToBeAdded = 0;\n\n      while (currentIds.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post('http://localhost:3001/api/putData', {\n        id: idToBeAdded,\n        message: message\n      });\n    };\n\n    this.deleteFromDB = idTodelete => {\n      parseInt(idTodelete);\n      let objIdToDelete = null;\n      this.state.data.forEach(dat => {\n        if (dat.id == idTodelete) {\n          objIdToDelete = dat._id;\n        }\n      });\n      axios.delete('http://localhost:3001/api/deleteData', {\n        data: {\n          id: objIdToDelete\n        }\n      });\n    };\n\n    this.updateDB = (idToUpdate, updateToApply) => {\n      let objIdToUpdate = null;\n      parseInt(idToUpdate);\n      this.state.data.forEach(dat => {\n        if (dat.id == idToUpdate) {\n          objIdToUpdate = dat._id;\n        }\n      });\n      axios.post('http://localhost:3001/api/updateData', {\n        id: objIdToUpdate,\n        update: {\n          message: updateToApply\n        }\n      });\n    };\n  }\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  } // never let a process live forever\n  // always kill a process everytime we are done using it\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  } // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n\n\n  // here is our UI\n  // it is easy to understand their functions when you\n  // see them render into our screen\n  render() {\n    const {\n      data\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 7\n      }\n    }, data.length <= 0 ? 'NO DB ENTRIES YET' : data.map(dat => /*#__PURE__*/React.createElement(\"div\", {\n      class: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"social\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }\n    }, \"Thank you for supporting us!\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 48\n      }\n    }), /*#__PURE__*/React.createElement(\"a\", {\n      href: dat.facebook,\n      id: \"share-fb\",\n      class: \"sharer button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-3x fa-facebook-square\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 70\n      }\n    })), /*#__PURE__*/React.createElement(\"a\", {\n      href: dat.facebook,\n      id: \"share-tw\",\n      class: \"sharer button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-3x fa-twitter-square\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 70\n      }\n    })), /*#__PURE__*/React.createElement(\"a\", {\n      href: dat.facebook,\n      id: \"share-li\",\n      class: \"sharer button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-3x fa-linkedin-square\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 70\n      }\n    })), /*#__PURE__*/React.createElement(\"a\", {\n      href: dat.facebook,\n      id: \"share-gp\",\n      class: \"sharer button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-3x fa-google-plus-square\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 70\n      }\n    })), /*#__PURE__*/React.createElement(\"a\", {\n      href: dat.facebook,\n      id: \"share-em\",\n      class: \"sharer button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-3x fa-envelope-square\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 70\n      }\n    }))))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 19\n      }\n    }))\n    /*   <div style={{ padding: '10px' }}>\r\n        <input\r\n          type=\"text\"\r\n          onChange={(e) => this.setState({ message: e.target.value })}\r\n          placeholder=\"add something in the database\"\r\n          style={{ width: '200px' }}\r\n        />\r\n        <button onClick={() => this.putDataToDB(this.state.message)}>\r\n          ADD\r\n        </button>\r\n      </div>\r\n      <div style={{ padding: '10px' }}>\r\n        <input\r\n          type=\"text\"\r\n          style={{ width: '200px' }}\r\n          onChange={(e) => this.setState({ idToDelete: e.target.value })}\r\n          placeholder=\"put id of item to delete here\"\r\n        />\r\n        <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\r\n          DELETE\r\n        </button>\r\n      </div>\r\n      <div style={{ padding: '10px' }}>\r\n        <input\r\n          type=\"text\"\r\n          style={{ width: '200px' }}\r\n          onChange={(e) => this.setState({ idToUpdate: e.target.value })}\r\n          placeholder=\"id of item to update here\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          style={{ width: '200px' }}\r\n          onChange={(e) => this.setState({ updateToApply: e.target.value })}\r\n          placeholder=\"put new value of the item here\"\r\n        />\r\n        <button\r\n          onClick={() =>\r\n            this.updateDB(this.state.idToUpdate, this.state.updateToApply)\r\n          }\r\n        >\r\n          UPDATE\r\n        </button>\r\n      </div> */\n    ;\n  }\n\n}\n\nexport default Coordonnees;","map":{"version":3,"sources":["C:/Users/Arij/projects/theone/client/src/components/clubPage/coordonnees.component.js"],"names":["React","axios","MongoClient","require","assert","Coordonnees","Component","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","fetch","then","json","res","setState","putDataToDB","currentIds","map","idToBeAdded","includes","post","deleteFromDB","idTodelete","parseInt","objIdToDelete","forEach","dat","_id","delete","updateDB","updateToApply","objIdToUpdate","update","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","length","facebook"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nconst MongoClient = require('mongodb').MongoClient;\r\nconst assert = require('assert');\r\n\r\nclass Coordonnees extends React.Component{\r\n   \r\n\r\n  state = {\r\n    data: [],\r\n    id: 0,\r\n    message: null,\r\n    intervalIsSet: false,\r\n    idToDelete: null,\r\n    idToUpdate: null,\r\n    objectToUpdate: null,\r\n  };\r\n\r\n  // when component mounts, first thing it does is fetch all existing data in our db\r\n  // then we incorporate a polling logic so that we can easily see if our db has\r\n  // changed and implement those changes into our UI\r\n  componentDidMount() {\r\n    this.getDataFromDb();\r\n    if (!this.state.intervalIsSet) {\r\n      let interval = setInterval(this.getDataFromDb, 1000);\r\n      this.setState({ intervalIsSet: interval });\r\n    }\r\n  }\r\n\r\n  // never let a process live forever\r\n  // always kill a process everytime we are done using it\r\n  componentWillUnmount() {\r\n    if (this.state.intervalIsSet) {\r\n      clearInterval(this.state.intervalIsSet);\r\n      this.setState({ intervalIsSet: null });\r\n    }\r\n  }\r\n\r\n  // just a note, here, in the front end, we use the id key of our data object\r\n  // in order to identify which we want to Update or delete.\r\n  // for our back end, we use the object id assigned by MongoDB to modify\r\n  // data base entries\r\n\r\n  // our first get method that uses our backend api to\r\n  // fetch data from our data base\r\n  getDataFromDb = () => {\r\n    fetch('http://localhost:3001/api/getData')\r\n      .then((data) => data.json())\r\n      .then((res) => this.setState({ data: res.data }));\r\n  };\r\n\r\n  // our put method that uses our backend api\r\n  // to create new query into our data base\r\n  putDataToDB = (message) => {\r\n    let currentIds = this.state.data.map((data) => data.id);\r\n    let idToBeAdded = 0;\r\n    while (currentIds.includes(idToBeAdded)) {\r\n      ++idToBeAdded;\r\n    }\r\n\r\n    axios.post('http://localhost:3001/api/putData', {\r\n      id: idToBeAdded,\r\n      message: message,\r\n    });\r\n  };\r\n\r\n  // our delete method that uses our backend api\r\n  // to remove existing database information\r\n  deleteFromDB = (idTodelete) => {\r\n    parseInt(idTodelete);\r\n    let objIdToDelete = null;\r\n    this.state.data.forEach((dat) => {\r\n      if (dat.id == idTodelete) {\r\n        objIdToDelete = dat._id;\r\n      }\r\n    });\r\n\r\n    axios.delete('http://localhost:3001/api/deleteData', {\r\n      data: {\r\n        id: objIdToDelete,\r\n      },\r\n    });\r\n  };\r\n\r\n  // our update method that uses our backend api\r\n  // to overwrite existing data base information\r\n  updateDB = (idToUpdate, updateToApply) => {\r\n    let objIdToUpdate = null;\r\n    parseInt(idToUpdate);\r\n    this.state.data.forEach((dat) => {\r\n      if (dat.id == idToUpdate) {\r\n        objIdToUpdate = dat._id;\r\n      }\r\n    });\r\n\r\n    axios.post('http://localhost:3001/api/updateData', {\r\n      id: objIdToUpdate,\r\n      update: { message: updateToApply },\r\n    });\r\n  };\r\n\r\n  // here is our UI\r\n  // it is easy to understand their functions when you\r\n  // see them render into our screen\r\n  render() {\r\n    const { data } = this.state;\r\n    return (\r\n      <div>\r\n      \r\n         \r\n            {data.length <= 0\r\n            ? 'NO DB ENTRIES YET'\r\n            : data.map((dat) => (\r\n              <div class=\"container\">\r\n          <div class=\"social\">\r\n          <h3>Thank you for supporting us!</h3><br/>\r\n          <a href={dat.facebook} id=\"share-fb\" class=\"sharer button\"><i class=\"fa fa-3x fa-facebook-square\"></i></a>\r\n          <a href={dat.facebook} id=\"share-tw\" class=\"sharer button\"><i class=\"fa fa-3x fa-twitter-square\"></i></a>\r\n          <a href={dat.facebook} id=\"share-li\" class=\"sharer button\"><i class=\"fa fa-3x fa-linkedin-square\"></i></a>\r\n          <a href={dat.facebook} id=\"share-gp\" class=\"sharer button\"><i class=\"fa fa-3x fa-google-plus-square\"></i></a>\r\n          <a href={dat.facebook} id=\"share-em\" class=\"sharer button\"><i class=\"fa fa-3x fa-envelope-square\"></i></a>\r\n        </div>\r\n        </div>\r\n              ))}\r\n        \r\n        \r\n        <br/><br/><br/>\r\n        </div>\r\n        /*   <div style={{ padding: '10px' }}>\r\n            <input\r\n              type=\"text\"\r\n              onChange={(e) => this.setState({ message: e.target.value })}\r\n              placeholder=\"add something in the database\"\r\n              style={{ width: '200px' }}\r\n            />\r\n            <button onClick={() => this.putDataToDB(this.state.message)}>\r\n              ADD\r\n            </button>\r\n          </div>\r\n          <div style={{ padding: '10px' }}>\r\n            <input\r\n              type=\"text\"\r\n              style={{ width: '200px' }}\r\n              onChange={(e) => this.setState({ idToDelete: e.target.value })}\r\n              placeholder=\"put id of item to delete here\"\r\n            />\r\n            <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\r\n              DELETE\r\n            </button>\r\n          </div>\r\n          <div style={{ padding: '10px' }}>\r\n            <input\r\n              type=\"text\"\r\n              style={{ width: '200px' }}\r\n              onChange={(e) => this.setState({ idToUpdate: e.target.value })}\r\n              placeholder=\"id of item to update here\"\r\n            />\r\n            <input\r\n              type=\"text\"\r\n              style={{ width: '200px' }}\r\n              onChange={(e) => this.setState({ updateToApply: e.target.value })}\r\n              placeholder=\"put new value of the item here\"\r\n            />\r\n            <button\r\n              onClick={() =>\r\n                this.updateDB(this.state.idToUpdate, this.state.updateToApply)\r\n              }\r\n            >\r\n              UPDATE\r\n            </button>\r\n          </div> */\r\n      \r\n    );\r\n  }\r\n}\r\nexport default Coordonnees;"]},"metadata":{},"sourceType":"module"}