{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Arij\\\\projects\\\\theone\\\\src\\\\components\\\\calendar.jsx\";\nimport React, { Component } from 'react';\nimport './styling.css';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport bootstrapPlugin from '@fullcalendar/bootstrap';\nimport PopUp from './popup';\nimport { faCoffee, faSearch } from '@fortawesome/free-solid-svg-icons';\nimport Dialog from 'react-bootstrap-dialog';\nimport { Button, Modal } from 'react-bootstrap';\nexport default class TheCalendar extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      appointments: [{\n        title: 'event 1',\n        start: '2020-04-01',\n        end: '2020-04-02',\n        rendering: 'background'\n      }, {\n        title: 'event 2',\n        date: '2020-04-02'\n      }],\n      seen: false\n    };\n\n    this.handleDateClick = arg => {// bind with an arrow function\n    };\n\n    this.handleDragStop = () => {\n      this.dialog.show({\n        title: 'Warning',\n        body: '<h1>HELLO</h1>',\n        actions: [Dialog.CancelAction(), Dialog.OKAction()],\n        bsSize: 'small',\n        onHide: dialog => {\n          dialog.hide();\n          console.log('closed by clicking background.');\n        }\n      });\n    };\n\n    this.handleEventClick = ({\n      event\n    }) => {\n      // openAppointment is a function I wrote to open a form to edit that appointment\n      // this.props.openAppointment(event.extendedProps)\n      this.dialog.showAlert('Hello Dialog!');\n    };\n\n    this.handleEventClick = this.handleEventClick.bind(this);\n  }\n\n  formatEvents() {\n    return this.state.appointments.map(appointment => {\n      const {\n        title,\n        end,\n        start\n      } = appointment;\n      let startTime = new Date(start);\n      let endTime = new Date(end);\n      return {\n        title,\n        start: startTime,\n        end: endTime,\n        extendedProps: { ...appointment\n        }\n      };\n    });\n  }\n\n  /*  handleEventDrop = (info) => {\r\n            if(window.confirm(\"Are you sure you want to change the event date?\")){\r\n                console.log('change confirmed')\r\n    \r\n                // updateAppointment is another custom method\r\n                this.props.updateAppointment({...info.event.extendedProps, start: info.event.start, end: info.event.end})\r\n    \r\n            } else {\r\n                console.log('change aborted')\r\n            }\r\n       }*/\n  MyVerticallyCenteredModal(props) {\n    return /*#__PURE__*/React.createElement(Modal, Object.assign({}, props, {\n      size: \"lg\",\n      \"aria-labelledby\": \"contained-modal-title-vcenter\",\n      centered: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Modal.Header, {\n      closeButton: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      id: \"contained-modal-title-vcenter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 15\n      }\n    }, \"Modal heading\")), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 15\n      }\n    }, \"Centered Modal\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 15\n      }\n    }, \"Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\")), /*#__PURE__*/React.createElement(Modal.Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: props.onHide,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 15\n      }\n    }, \"Close\")));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(FullCalendar, {\n      dateClick: this.handleDateClick,\n      plugins: [dayGridPlugin, interactionPlugin, bootstrapPlugin],\n      weekends: false,\n      editable: true,\n      selectable: true,\n      selectMirror: true,\n      eventDragStop: this.handleDragStop //  eventDrop={this.handleEventDrop}\n      ,\n      eventClick: this.handleEventClick(true),\n      select: this.handleEventClick,\n      dateClick: this.handleEventClick,\n      events: this.formatEvents(),\n      slotWidth: 60,\n      eventColor: \"#378006\",\n      eventBackgroundColor: \"white\",\n      eventBorderColor: \"black\",\n      eventTextColor: \"red\",\n      customButtons: {\n        myCustomButton: {\n          text: 'Add new event ',\n          click: function () {\n            alert('clicked the custom button!');\n          }\n        }\n      },\n      header: {\n        right: 'prev,next today ',\n        center: 'title',\n        left: 'myCustomButton,timeGridWeek,timeGridDay,listWeek'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Dialog, {\n      className: \"modal-dialog modal-dialog-centered\",\n      ref: component => {\n        this.dialog = component;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(MyVerticallyCenteredModal, {\n      show: modalShow,\n      onHide: () => this.handleEventClick(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Arij/projects/theone/src/components/calendar.jsx"],"names":["React","Component","FullCalendar","dayGridPlugin","interactionPlugin","bootstrapPlugin","PopUp","faCoffee","faSearch","Dialog","Button","Modal","TheCalendar","constructor","state","appointments","title","start","end","rendering","date","seen","handleDateClick","arg","handleDragStop","dialog","show","body","actions","CancelAction","OKAction","bsSize","onHide","hide","console","log","handleEventClick","event","showAlert","bind","formatEvents","map","appointment","startTime","Date","endTime","extendedProps","MyVerticallyCenteredModal","props","render","myCustomButton","text","click","alert","right","center","left","component","modalShow"],"mappings":"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","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport './styling.css';\r\nimport FullCalendar from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport bootstrapPlugin from '@fullcalendar/bootstrap';\r\nimport PopUp from './popup';\r\nimport { faCoffee, faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport Dialog from 'react-bootstrap-dialog'\r\nimport {Button,Modal} from 'react-bootstrap';\r\n\r\nexport default class TheCalendar extends React.Component {\r\n    constructor () {\r\n        super()\r\n        this.handleEventClick = this.handleEventClick.bind(this)\r\n      }\r\n    state={\r\n       \r\n        appointments:[\r\n            { title: 'event 1', start: '2020-04-01', end:'2020-04-02' ,rendering: 'background'},\r\n            { title: 'event 2', date: '2020-04-02' }\r\n          ],\r\n          seen: false\r\n    }\r\n    \r\n\r\n\r\n    handleDateClick = (arg) => { // bind with an arrow function\r\n       \r\n      }\r\n      formatEvents() {\r\n        return this.state.appointments.map(appointment => {\r\n                  const {title, end, start} = appointment\r\n      \r\n                  let startTime = new Date(start)\r\n                  let endTime = new Date(end)\r\n      \r\n                  return {\r\n                    title, \r\n                    start: startTime,\r\n                    end: endTime, \r\n                    extendedProps: {...appointment}\r\n                  }\r\n              })\r\n      }\r\n      handleDragStop=()=>{\r\n        this.dialog.show({\r\n            title: 'Warning',\r\n            body: '<h1>HELLO</h1>',\r\n            actions: [\r\n              Dialog.CancelAction(),\r\n              Dialog.OKAction()\r\n            ],\r\n            bsSize: 'small',\r\n            onHide: (dialog) => {\r\n              dialog.hide()\r\n              console.log('closed by clicking background.')\r\n            }\r\n          })\r\n\r\n      }\r\n      handleEventClick= ({event}) => {\r\n        // openAppointment is a function I wrote to open a form to edit that appointment\r\n       // this.props.openAppointment(event.extendedProps)\r\n       this.dialog.showAlert('Hello Dialog!')}\r\n    \r\n  /*  handleEventDrop = (info) => {\r\n            if(window.confirm(\"Are you sure you want to change the event date?\")){\r\n                console.log('change confirmed')\r\n    \r\n                // updateAppointment is another custom method\r\n                this.props.updateAppointment({...info.event.extendedProps, start: info.event.start, end: info.event.end})\r\n    \r\n            } else {\r\n                console.log('change aborted')\r\n            }\r\n       }*/\r\n      MyVerticallyCenteredModal(props) {\r\n        return (\r\n          <Modal\r\n            {...props}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n          >\r\n            <Modal.Header closeButton>\r\n              <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Modal heading\r\n              </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <h4>Centered Modal</h4>\r\n              <p>\r\n                Cras mattis consectetur purus sit amet fermentum. Cras justo odio,\r\n                dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac\r\n                consectetur ac, vestibulum at eros.\r\n              </p>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button onClick={props.onHide}>Close</Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n        );\r\n      }\r\n      \r\n  render() {\r\n      \r\n    return (\r\n    <div className='jumbotron'>\r\n              <FullCalendar dateClick={this.handleDateClick} \r\n              plugins={[ dayGridPlugin, interactionPlugin,bootstrapPlugin ]}\r\n               weekends={false}\r\n                editable={true}\r\n                selectable={true}\r\n                selectMirror={true}\r\n                eventDragStop={this.handleDragStop}\r\n              //  eventDrop={this.handleEventDrop}\r\n                eventClick={this.handleEventClick(true)}\r\n                select={this.handleEventClick}\r\n                dateClick={this.handleEventClick}\r\n                events={this.formatEvents()}\r\n                slotWidth={60}\r\n                eventColor= '#378006'\r\n                eventBackgroundColor='white'\r\n                eventBorderColor=\"black\"\r\n                eventTextColor='red'\r\n                customButtons={{\r\n                  myCustomButton: {\r\n                      text: 'Add new event ',\r\n                      click: function() {\r\n                          alert('clicked the custom button!');\r\n                      },\r\n                  },\r\n              }}\r\n              header={{\r\n                  right:  'prev,next today ',\r\n                  center: 'title',\r\n                  left:'myCustomButton,timeGridWeek,timeGridDay,listWeek'\r\n              }}\r\n             \r\n                \r\n              />\r\n              <Dialog className=\"modal-dialog modal-dialog-centered\"\r\n              ref={(component) => { this.dialog = component }}\r\n              />\r\n                <MyVerticallyCenteredModal\r\n        show={modalShow}\r\n        onHide={() => this.handleEventClick(false)}\r\n      />\r\n              </div>\r\n\r\n\r\n)\r\n  }\r\n}\r\n\r\n    \r\n"]},"metadata":{},"sourceType":"module"}