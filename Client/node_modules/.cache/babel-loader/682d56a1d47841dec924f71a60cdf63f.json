{"ast":null,"code":"import axios from \"axios\";\nimport { USER_LOADING, REGISTER_SUCCESS, REGISTER_FAIL, GET_USERS, AUTH_ERROR, USER_LOADED, LOGIN_FAIL, LOGIN_SUCCESS, LOGOUT_SUCCESS } from \"./types\";\nimport { returnErrors } from \"./errorActions\";\nexport const register = ({\n  username,\n  email,\n  password,\n  password_confirmation\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // Request body\n\n  const body = JSON.stringify({\n    username,\n    email,\n    password,\n    password_confirmation\n  });\n  axios.post(\"/api/developers/register\", body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\"));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n}; //Check token and load user\n\nexport const loadUser = type => (dispatch, getState) => {\n  // User loading\n  dispatch({\n    type: USER_LOADING\n  });\n\n  if (type === \"developer\") {\n    axios.get(\"/api/developers/user\", tokenConfig(getState)).then(res => {\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n    }).catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: AUTH_ERROR\n      });\n    });\n  } else if (type === \"tester\") {\n    axios.get(\"/api/testers/tester\", tokenConfig(getState)).then(res => {\n      console.log(\"TESTER : \", res.data);\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n    }).catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: AUTH_ERROR\n      });\n    });\n  } else if (type === \"admin\") {\n    axios.get(\"/api/admins/admin\", tokenConfig(getState)).then(res => {\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n    }).catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: AUTH_ERROR\n      });\n    });\n  }\n}; //getUsers\n\nexport const getUsers = () => dispatch => {\n  axios.get(\"/api/users\").then(res => dispatch({\n    type: GET_USERS,\n    payload: res.data\n  })).catch(err => dispatch(returnErrors(err.response.data, err.response.status)));\n}; //User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\nexport const tokenConfig = getState => {\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  };\n\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  return config;\n}; // Log user out\n\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n}; //Login user\n\nexport const login = ({\n  email,\n  password,\n  type\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // Request body\n\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  if (type === \"admin\") {\n    console.log(\"logging in admin : \", email);\n    axios.post(\"/api/admins/login\", body, config).then(res => dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    })).catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status, \"LOGIN_FAIL\"));\n      dispatch({\n        type: LOGIN_FAIL\n      });\n    });\n  } else if (type === \"Developer\") {\n    axios.post(\"/api/developers/login\", body, config).then(res => dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    })).catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status, \"LOGIN_FAIL\"));\n      dispatch({\n        type: LOGIN_FAIL\n      });\n    });\n  } else {\n    console.log(\"logging in tester : \", email);\n    axios.post(\"/api/testers/login\", body, config).then(res => dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    })).catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status, \"LOGIN_FAIL\"));\n      dispatch({\n        type: LOGIN_FAIL\n      });\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Arij/projects/theone/client/src/actions/authActions.jsx"],"names":["axios","USER_LOADING","REGISTER_SUCCESS","REGISTER_FAIL","GET_USERS","AUTH_ERROR","USER_LOADED","LOGIN_FAIL","LOGIN_SUCCESS","LOGOUT_SUCCESS","returnErrors","register","username","email","password","password_confirmation","dispatch","config","headers","body","JSON","stringify","post","then","res","type","payload","data","catch","err","response","status","loadUser","getState","get","tokenConfig","console","log","getUsers","setUserLoading","token","auth","logout","login"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  USER_LOADING,\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  GET_USERS,\r\n  AUTH_ERROR,\r\n  USER_LOADED,\r\n  LOGIN_FAIL,\r\n  LOGIN_SUCCESS,\r\n  LOGOUT_SUCCESS,\r\n} from \"./types\";\r\nimport { returnErrors } from \"./errorActions\";\r\n\r\nexport const register = ({\r\n  username,\r\n  email,\r\n  password,\r\n  password_confirmation,\r\n}) => (dispatch) => {\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  // Request body\r\n  const body = JSON.stringify({\r\n    username,\r\n    email,\r\n    password,\r\n    password_confirmation,\r\n  });\r\n\r\n  axios\r\n    .post(\"/api/developers/register\", body, config)\r\n    .then((res) =>\r\n      dispatch({\r\n        type: REGISTER_SUCCESS,\r\n        payload: res.data,\r\n      })\r\n    )\r\n    .catch((err) => {\r\n      dispatch(\r\n        returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\")\r\n      );\r\n      dispatch({\r\n        type: REGISTER_FAIL,\r\n      });\r\n    });\r\n};\r\n//Check token and load user\r\nexport const loadUser = (type) => (dispatch, getState) => {\r\n  // User loading\r\n  dispatch({ type: USER_LOADING });\r\n  if (type === \"developer\") {\r\n    axios\r\n      .get(\"/api/developers/user\", tokenConfig(getState))\r\n      .then((res) => {\r\n        dispatch({\r\n          type: USER_LOADED,\r\n          payload: res.data,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        dispatch(returnErrors(err.response.data, err.response.status));\r\n        dispatch({\r\n          type: AUTH_ERROR,\r\n        });\r\n      });\r\n  } else if (type === \"tester\") {\r\n    axios\r\n      .get(\"/api/testers/tester\", tokenConfig(getState))\r\n      .then((res) => {\r\n        console.log(\"TESTER : \", res.data);\r\n        dispatch({\r\n          type: USER_LOADED,\r\n          payload: res.data,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        dispatch(returnErrors(err.response.data, err.response.status));\r\n        dispatch({\r\n          type: AUTH_ERROR,\r\n        });\r\n      });\r\n  } else if (type === \"admin\") {\r\n    axios\r\n      .get(\"/api/admins/admin\", tokenConfig(getState))\r\n      .then((res) => {\r\n        dispatch({\r\n          type: USER_LOADED,\r\n          payload: res.data,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        dispatch(returnErrors(err.response.data, err.response.status));\r\n        dispatch({\r\n          type: AUTH_ERROR,\r\n        });\r\n      });\r\n  }\r\n};\r\n\r\n//getUsers\r\nexport const getUsers = () => (dispatch) => {\r\n  axios\r\n    .get(\"/api/users\")\r\n    .then((res) =>\r\n      dispatch({\r\n        type: GET_USERS,\r\n        payload: res.data,\r\n      })\r\n    )\r\n    .catch((err) =>\r\n      dispatch(returnErrors(err.response.data, err.response.status))\r\n    );\r\n};\r\n\r\n//User loading\r\nexport const setUserLoading = () => {\r\n  return {\r\n    type: USER_LOADING,\r\n  };\r\n};\r\n\r\nexport const tokenConfig = (getState) => {\r\n  const token = getState().auth.token;\r\n\r\n  const config = {\r\n    headers: {\r\n      \"Content-type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  if (token) {\r\n    config.headers[\"x-auth-token\"] = token;\r\n  }\r\n  return config;\r\n};\r\n\r\n// Log user out\r\nexport const logout = () => {\r\n  return { type: LOGOUT_SUCCESS };\r\n};\r\n\r\n//Login user\r\nexport const login = ({ email, password, type }) => (dispatch) => {\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  // Request body\r\n  const body = JSON.stringify({\r\n    email,\r\n    password,\r\n  });\r\n  if (type === \"admin\") {\r\n    console.log(\"logging in admin : \", email);\r\n    axios\r\n      .post(\"/api/admins/login\", body, config)\r\n      .then((res) =>\r\n        dispatch({\r\n          type: LOGIN_SUCCESS,\r\n          payload: res.data,\r\n        })\r\n      )\r\n      .catch((err) => {\r\n        dispatch(\r\n          returnErrors(err.response.data, err.response.status, \"LOGIN_FAIL\")\r\n        );\r\n        dispatch({\r\n          type: LOGIN_FAIL,\r\n        });\r\n      });\r\n  } else if (type === \"Developer\") {\r\n    axios\r\n      .post(\"/api/developers/login\", body, config)\r\n      .then((res) =>\r\n        dispatch({\r\n          type: LOGIN_SUCCESS,\r\n          payload: res.data,\r\n        })\r\n      )\r\n      .catch((err) => {\r\n        dispatch(\r\n          returnErrors(err.response.data, err.response.status, \"LOGIN_FAIL\")\r\n        );\r\n        dispatch({\r\n          type: LOGIN_FAIL,\r\n        });\r\n      });\r\n  } else {\r\n    console.log(\"logging in tester : \", email);\r\n    axios\r\n      .post(\"/api/testers/login\", body, config)\r\n      .then((res) =>\r\n        dispatch({\r\n          type: LOGIN_SUCCESS,\r\n          payload: res.data,\r\n        })\r\n      )\r\n      .catch((err) => {\r\n        dispatch(\r\n          returnErrors(err.response.data, err.response.status, \"LOGIN_FAIL\")\r\n        );\r\n        dispatch({\r\n          type: LOGIN_FAIL,\r\n        });\r\n      });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}